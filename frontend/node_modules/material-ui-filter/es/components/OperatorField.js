function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import Input from '@material-ui/core/Input';
import { withTheme, withStyles } from '@material-ui/core/styles';
import Toolbar from '@material-ui/core/Toolbar';
import Tooltip from '@material-ui/core/Tooltip';
import IconButton from '@material-ui/core/IconButton';
import Icon from '@material-ui/core/Icon';
import * as filterSelectors from '../store/selectors';
import { SelectField } from 'muishift';

var styles = {};

export var OperatorField = function (_Component) {
  _inherits(OperatorField, _Component);

  function OperatorField() {
    var _temp, _this, _ret;

    _classCallCheck(this, OperatorField);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getFieldType = function (currentField) {
      var fields = _this.props.fields;


      var fieldType = '';

      fields.map(function (field) {
        if (field.name === currentField.value) {
          fieldType = field.type;
        }
        return field;
      });

      return fieldType;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  OperatorField.prototype.render = function render() {
    var _props = this.props,
        queryIndex = _props.queryIndex,
        currentField = _props.currentField,
        query = _props.query,
        fields = _props.fields,
        operators = _props.operators,
        handleQueryChange = _props.handleQueryChange,
        formatMessage = _props.formatMessage,
        classes = _props.classes,
        onClick = _props.onClick;

    var _filterSelectors$sele = filterSelectors.selectQueryProps(query),
        operator = _filterSelectors$sele.operator,
        isCaseSensitive = _filterSelectors$sele.isCaseSensitive;

    if (queryIndex == null || currentField == null || query == null || handleQueryChange == null || fields == null) {
      return React.createElement('div', null);
    }

    var fieldType = this.getFieldType(currentField);
    var divFields = [];

    operators.map(function (operator) {
      if (operator.type === fieldType || operator.type === 'string' && fieldType === undefined) {
        operator.operators.map(function (op) {
          return divFields.push({
            value: op.value,
            label: op.label
          });
        });
      }
      return divFields;
    });

    return React.createElement(
      Toolbar,
      null,
      React.createElement(
        'div',
        { style: { maxWidth: 160 } },
        React.createElement(SelectField, {
          input: { value: operator },
          onChange: function onChange(val) {
            handleQueryChange(queryIndex, 'operator', val);
          },
          items: divFields,
          itemToString: function itemToString(item) {
            return item ? item.label : '';
          },
          id: 'react-select-single',
          inputProps: {
            fullWidth: true,
            placeholder: formatMessage ? formatMessage({ id: 'hint_autocomplete' }) : 'Select operator'
          }
        })
      ),
      React.createElement(
        Tooltip,
        {
          id: 'tooltip-bottom-start',
          title: formatMessage ? formatMessage({ id: isCaseSensitive ? 'disable_case_sensitivity' : 'enable_case_sensitivity' }) : '',
          placement: 'bottom-end' },
        React.createElement(
          IconButton,
          { onClick: onClick, 'aria-label': 'Delete', color: 'secondary' },
          React.createElement(
            Icon,
            null,
            'delete'
          )
        )
      )
    );
  };

  return OperatorField;
}(Component);

export default withStyles(styles)(OperatorField);