function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import * as filterSelectors from '../store/selectors';
import Switch from '@material-ui/core/Switch';
import TextField from '@material-ui/core/TextField';
import { DatePicker } from 'material-ui-pickers';
import IconButton from '@material-ui/core/IconButton';
import Icon from '@material-ui/core/Icon';
import Toolbar from '@material-ui/core/Toolbar';
import Tooltip from '@material-ui/core/Tooltip';

export var SearchField = function (_Component) {
  _inherits(SearchField, _Component);

  function SearchField() {
    _classCallCheck(this, SearchField);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  SearchField.prototype.render = function render() {
    var _props = this.props,
        theme = _props.theme,
        queryIndex = _props.queryIndex,
        currentField = _props.currentField,
        query = _props.query,
        formatMessage = _props.formatMessage,
        fields = _props.fields,
        handleQueryChange = _props.handleQueryChange,
        DateTimeFormat = _props.DateTimeFormat,
        locale = _props.locale,
        okLabel = _props.okLabel,
        cancelLabel = _props.cancelLabel;

    var _filterSelectors$sele = filterSelectors.selectQueryProps(query),
        value = _filterSelectors$sele.value,
        isCaseSensitive = _filterSelectors$sele.isCaseSensitive;

    if (queryIndex == null || currentField == null || query == null || handleQueryChange == null || fields == null) {
      return React.createElement('div', null);
    }

    var fieldType = '';
    var fieldLabel = '';

    fields.map(function (field) {
      if (field.name === currentField.value) {
        fieldType = field.type;
        fieldLabel = field.label;
      }
      return field;
    });

    if (fieldType === 'date') {
      return React.createElement(
        Toolbar,
        null,
        React.createElement(DatePicker, {
          keyboard: true,
          label: formatMessage ? formatMessage({ id: 'enter_query_text' }) : '',
          format: 'DD/MM/YYYY',
          placeholder: '10/10/2018',
          mask: function mask(value) {
            return value ? [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/] : [];
          },
          value: value,
          onChange: function onChange(val) {
            handleQueryChange(queryIndex, 'value', val.format());
          },
          disableOpenOnEnter: true,
          animateYearScrolling: false
        })
      );
    }

    if (fieldType === 'bool') {
      return React.createElement(
        Toolbar,
        null,
        React.createElement(Switch, {
          label: fieldLabel,
          onChange: function onChange(e, val) {
            handleQueryChange(queryIndex, 'value', val);
          },
          value: value
        })
      );
    } else {
      //string

      return React.createElement(
        Toolbar,
        null,
        React.createElement(TextField, {
          fullWidth: true,
          name: 'value',
          onChange: function onChange(e, val) {
            handleQueryChange(queryIndex, 'value', e.target.value);
          },
          value: value ? value : '',
          placeholder: formatMessage ? formatMessage({ id: 'enter_query_text' }) : ''
        }),
        React.createElement(
          Tooltip,
          {
            id: 'tooltip-bottom-start',
            title: formatMessage ? formatMessage({ id: isCaseSensitive ? 'disable_case_sensitivity' : 'enable_case_sensitivity' }) : '',
            placement: 'bottom-end'
          },
          React.createElement(
            IconButton,
            {
              onClick: function onClick() {
                handleQueryChange(queryIndex, 'isCaseSensitive', !isCaseSensitive);
              },
              color: isCaseSensitive ? 'primary' : undefined
            },
            React.createElement(
              Icon,
              null,
              'format_size'
            )
          )
        )
      );
    }
  };

  return SearchField;
}(Component);