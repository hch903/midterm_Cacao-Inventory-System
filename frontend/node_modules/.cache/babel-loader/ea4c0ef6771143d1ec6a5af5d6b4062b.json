{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nimport moment from 'moment';\nexport var STRING_TYPE = 'string';\nexport var NUMBER_TYPE = 'number';\nexport var DATE_TYPE = 'date';\nexport var TIME_TYPE = 'time';\nexport var ARRAY_TYPE = 'array';\nexport var SELECT_FIELD_TYPE = 'select_field';\n\nfunction getValue(source, fieldName) {\n  var getSourceValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (fieldValue) {\n    return fieldValue;\n  };\n  var isCaseSensitive = arguments[3];\n  var type = arguments[4];\n\n  if (source != null && getSourceValue(source)) {\n    var fieldValue = getSourceValue(source)[fieldName];\n\n    if (type === 'object') {\n      return fieldValue ? fieldValue : {};\n    }\n\n    if ((typeof fieldValue === 'undefined' ? 'undefined' : _typeof(fieldValue)) === 'object' || fieldValue instanceof Object) {\n      if (fieldValue.hasOwnProperty('label')) {\n        fieldValue = fieldValue.label;\n      }\n    }\n\n    if (type === 'date') {\n      return new Date(fieldValue).setHours(0, 0, 0, 0);\n    } else if (type === 'bool') {\n      return fieldValue === undefined ? 'false' : fieldValue;\n    } else {\n      return isCaseSensitive === true ? String(fieldValue) : String(fieldValue).toUpperCase();\n    }\n  }\n}\n\nexport function dynamicSort(sortField, sortOrientation, getSourceValue) {\n  var sortOrder = sortOrientation ? 1 : -1;\n  return function (x, y) {\n    var a = getValue(x, sortField, getSourceValue);\n    var b = getValue(y, sortField, getSourceValue);\n    var result = a < b ? -1 : a > b ? 1 : 0;\n    return result * sortOrder;\n  };\n}\nexport function selectFilterProps(filterName, filters) {\n  var isOpen = false;\n  var hasFilters = false;\n  var sortField = null;\n  var sortOrientation = true;\n  var queries = [];\n  var searchValue = null;\n\n  if (filters !== undefined && filters[filterName] !== undefined) {\n    var filter = filters[filterName];\n    isOpen = filter.isOpen !== undefined ? filter.isOpen : isOpen;\n    hasFilters = filter.queries !== undefined ? filter.queries.length : hasFilters;\n    sortField = filter.sortField !== undefined ? filter.sortField : sortField;\n    sortOrientation = filter.sortOrientation !== undefined ? filter.sortOrientation : sortOrientation;\n    queries = filter.queries !== undefined ? filter.queries : queries;\n    searchValue = filter.search !== undefined ? filter.search.value : searchValue;\n  }\n\n  return {\n    isOpen: isOpen,\n    hasFilters: hasFilters,\n    sortField: sortField,\n    sortOrientation: sortOrientation,\n    queries: queries,\n    searchValue: searchValue\n  };\n}\nexport function selectQueryProps(query) {\n  var value = '';\n  var operator = void 0;\n  var field = void 0;\n  var type = 'string';\n  var isCaseSensitive = false;\n  var isSet = false;\n\n  if (query !== undefined) {\n    value = query.value !== undefined ? query.value : value;\n    operator = query.operator !== undefined ? query.operator : operator;\n    field = query.field !== undefined ? query.field : field;\n    type = query.type !== undefined ? query.type : type;\n    isCaseSensitive = query.isCaseSensitive !== undefined ? query.isCaseSensitive : isCaseSensitive;\n    isSet = field !== undefined && field !== null && operator !== undefined && operator !== null && value !== undefined;\n  }\n\n  return {\n    value: value,\n    operator: operator,\n    field: field,\n    type: type,\n    isCaseSensitive: isCaseSensitive,\n    isSet: isSet\n  };\n}\nexport function getFilteredList(filterName, filters, list, getSourceValue) {\n  var _selectFilterProps = selectFilterProps(filterName, filters),\n      sortField = _selectFilterProps.sortField,\n      sortOrientation = _selectFilterProps.sortOrientation,\n      queries = _selectFilterProps.queries,\n      searchValue = _selectFilterProps.searchValue;\n\n  var dateOptions = {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  };\n\n  if (list == null || list.length < 1) {\n    return [];\n  }\n\n  var result = [].concat(list);\n  result = result.filter(function (row, i) {\n    var show = true;\n\n    if (queries) {\n      for (var _iterator = queries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var query = _ref;\n\n        var _selectQueryProps = selectQueryProps(query),\n            value = _selectQueryProps.value,\n            operator = _selectQueryProps.operator,\n            field = _selectQueryProps.field,\n            isCaseSensitive = _selectQueryProps.isCaseSensitive,\n            isSet = _selectQueryProps.isSet,\n            type = _selectQueryProps.type;\n\n        if (isSet) {\n          var fieldValue = getValue(row, field.value, getSourceValue, isCaseSensitive, type);\n\n          if (type === 'date') {\n            var queryDate = moment(value);\n\n            switch (operator.value) {\n              case '=':\n                show = queryDate.isSame(fieldValue, 'day');\n                break;\n\n              case '!=':\n                show = !queryDate.isSame(fieldValue, 'day');\n                break;\n\n              case '>':\n                show = queryDate.isAfter(fieldValue, 'day');\n                break;\n\n              case '>=':\n                show = queryDate.isSameOrAfter(fieldValue, 'day');\n                break;\n\n              case '<':\n                show = queryDate.isBefore(fieldValue, 'day');\n                break;\n\n              case '<=':\n                show = queryDate.isSameOrBefore(fieldValue, 'day');\n                break;\n\n              default:\n                break;\n            }\n\n            if (!show) {\n              return show;\n            }\n          } else if (type === 'bool') {\n            var fieldVal = false;\n\n            if (fieldValue === true || fieldValue === 'true') {\n              fieldVal = true;\n            }\n\n            var queryVal = false;\n\n            if (value === true || value === 'true') {\n              queryVal = true;\n            }\n\n            show = fieldVal === queryVal;\n\n            if (!show) {\n              return show;\n            }\n          } else if (type === 'object') {\n            show = JSON.stringify(fieldValue ? fieldValue : '').toUpperCase().indexOf(String(value ? value : '').toUpperCase()) !== -1;\n\n            if (!show) {\n              return show;\n            }\n          } else {\n            var valueString = String(value);\n            var fieldValueString = String(fieldValue);\n            var queryValueString = isCaseSensitive === true ? valueString : valueString.toUpperCase();\n\n            switch (operator.value) {\n              case 'like':\n                show = fieldValueString.indexOf(queryValueString) !== -1;\n                break;\n\n              case 'notlike':\n                show = fieldValueString.indexOf(queryValueString) === -1;\n                break;\n\n              case '=':\n                show = fieldValueString === queryValueString;\n                break;\n\n              case '>':\n                show = fieldValueString.localeCompare(queryValueString) > 0;\n                break;\n\n              case '>=':\n                show = fieldValueString.localeCompare(queryValueString) >= 0;\n                break;\n\n              case '<':\n                show = fieldValueString.localeCompare(queryValueString) < 0;\n                break;\n\n              case '<=':\n                show = fieldValueString.localeCompare(valueString) <= 0;\n                break;\n\n              default:\n                break;\n            }\n\n            if (!show) {\n              return show;\n            }\n          }\n        }\n      }\n    }\n\n    if (searchValue != null && searchValue !== '' && show) {\n      show = JSON.stringify(row).toUpperCase().indexOf(String(searchValue).toUpperCase()) !== -1;\n    }\n\n    return show;\n  });\n\n  if (result !== undefined && sortField !== null) {\n    result.sort(dynamicSort(sortField.value, sortOrientation, getSourceValue));\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}