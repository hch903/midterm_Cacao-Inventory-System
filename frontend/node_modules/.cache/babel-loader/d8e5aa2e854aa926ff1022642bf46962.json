{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport * as types from './types';\nexport function setFilterIsOpen(name, isOpen) {\n  return {\n    type: types.ON_FILTER_OPEN_CHANGED,\n    name: name,\n    payload: {\n      isOpen: isOpen\n    }\n  };\n}\nexport function setFilterSortField(name, sortField) {\n  return {\n    type: types.ON_FILTER_SORT_FIELD_CHANGED,\n    name: name,\n    payload: {\n      sortField: sortField\n    }\n  };\n}\nexport function setFilterSortOrientation(name, sortOrientation) {\n  return {\n    type: types.ON_FILTER_SORT_FIELD_CHANGED,\n    name: name,\n    payload: {\n      sortOrientation: sortOrientation\n    }\n  };\n}\nexport function addFilterQuery(name, query) {\n  return {\n    type: types.ON_ADD_FILTER_QUERY,\n    name: name,\n    payload: _extends({}, query)\n  };\n}\nexport function setSearch(name, search) {\n  return {\n    type: types.ON_SET_SEARCH,\n    name: name,\n    payload: search\n  };\n}\nexport function editFilterQuery(name, index, query) {\n  return {\n    type: types.ON_EDIT_FILTER_QUERY,\n    name: name,\n    index: index,\n    payload: _extends({}, query)\n  };\n}\nexport function removeFilterQuery(name, index) {\n  return {\n    type: types.ON_REMOVE_FILTER_QUERY,\n    name: name,\n    index: index\n  };\n}","map":null,"metadata":{},"sourceType":"module"}