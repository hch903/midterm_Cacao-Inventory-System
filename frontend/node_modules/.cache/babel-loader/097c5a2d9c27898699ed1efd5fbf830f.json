{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport Input from '@material-ui/core/Input';\nimport { withTheme, withStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport * as filterSelectors from '../store/selectors';\nimport { SelectField } from 'muishift';\nvar styles = {};\nexport var OperatorField = function (_Component) {\n  _inherits(OperatorField, _Component);\n\n  function OperatorField() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, OperatorField);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getFieldType = function (currentField) {\n      var fields = _this.props.fields;\n      var fieldType = '';\n      fields.map(function (field) {\n        if (field.name === currentField.value) {\n          fieldType = field.type;\n        }\n\n        return field;\n      });\n      return fieldType;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  OperatorField.prototype.render = function render() {\n    var _props = this.props,\n        queryIndex = _props.queryIndex,\n        currentField = _props.currentField,\n        query = _props.query,\n        fields = _props.fields,\n        operators = _props.operators,\n        handleQueryChange = _props.handleQueryChange,\n        formatMessage = _props.formatMessage,\n        classes = _props.classes,\n        onClick = _props.onClick;\n\n    var _filterSelectors$sele = filterSelectors.selectQueryProps(query),\n        operator = _filterSelectors$sele.operator,\n        isCaseSensitive = _filterSelectors$sele.isCaseSensitive;\n\n    if (queryIndex == null || currentField == null || query == null || handleQueryChange == null || fields == null) {\n      return React.createElement('div', null);\n    }\n\n    var fieldType = this.getFieldType(currentField);\n    var divFields = [];\n    operators.map(function (operator) {\n      if (operator.type === fieldType || operator.type === 'string' && fieldType === undefined) {\n        operator.operators.map(function (op) {\n          return divFields.push({\n            value: op.value,\n            label: op.label\n          });\n        });\n      }\n\n      return divFields;\n    });\n    return React.createElement(Toolbar, null, React.createElement('div', {\n      style: {\n        maxWidth: 160\n      }\n    }, React.createElement(SelectField, {\n      input: {\n        value: operator\n      },\n      onChange: function onChange(val) {\n        handleQueryChange(queryIndex, 'operator', val);\n      },\n      items: divFields,\n      itemToString: function itemToString(item) {\n        return item ? item.label : '';\n      },\n      id: 'react-select-single',\n      inputProps: {\n        fullWidth: true,\n        placeholder: formatMessage ? formatMessage({\n          id: 'hint_autocomplete'\n        }) : 'Select operator'\n      }\n    })), React.createElement(Tooltip, {\n      id: 'tooltip-bottom-start',\n      title: formatMessage ? formatMessage({\n        id: isCaseSensitive ? 'disable_case_sensitivity' : 'enable_case_sensitivity'\n      }) : '',\n      placement: 'bottom-end'\n    }, React.createElement(IconButton, {\n      onClick: onClick,\n      'aria-label': 'Delete',\n      color: 'secondary'\n    }, React.createElement(Icon, null, 'delete'))));\n  };\n\n  return OperatorField;\n}(Component);\nexport default withStyles(styles)(OperatorField);","map":null,"metadata":{},"sourceType":"module"}