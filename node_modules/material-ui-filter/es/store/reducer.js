var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import * as types from './types';

function query(query, action) {
  var payload = action.payload;


  switch (action.type) {
    case types.ON_ADD_FILTER_QUERY:
    case types.ON_EDIT_FILTER_QUERY:
      return _extends({}, query, payload);

    default:
      return query;
  }
}

function queries() {
  var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];
  var index = action.index;


  switch (action.type) {
    case types.ON_ADD_FILTER_QUERY:
      return [].concat(queries, [query({}, action)]);

    case types.ON_EDIT_FILTER_QUERY:
      return queries.map(function (q, i) {
        if (index !== i) {
          return q;
        }
        return query(q, action);
      });

    case types.ON_REMOVE_FILTER_QUERY:
      return queries.filter(function (item, i) {
        return i !== index;
      });

    default:
      return queries;
  }
}

function search() {
  var search = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];
  var payload = action.payload;


  switch (action.type) {
    case types.ON_SET_SEARCH:
      return _extends({}, search, { value: payload });

    default:
      return search;
  }
}

function filter() {
  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];
  var payload = action.payload;


  switch (action.type) {
    case types.ON_FILTER_OPEN_CHANGED:
    case types.ON_FILTER_SORT_FIELD_CHANGED:
    case types.ON_FILTER_SORT_ORIENTATION_CHANGED:
      return _extends({}, filter, payload);

    case types.ON_ADD_FILTER_QUERY:
    case types.ON_EDIT_FILTER_QUERY:
    case types.ON_REMOVE_FILTER_QUERY:
      return _extends({}, filter, { queries: queries(filter.queries, action) });

    case types.ON_SET_SEARCH:
      return _extends({}, filter, { search: search(filter.search, action) });

    default:
      return filter;
  }
}

export default function filters() {
  var _extends2;

  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];
  var name = action.name;

  switch (action.type) {
    case types.ON_FILTER_OPEN_CHANGED:
    case types.ON_FILTER_SORT_FIELD_CHANGED:
    case types.ON_FILTER_SORT_ORIENTATION_CHANGED:
    case types.ON_ADD_FILTER_QUERY:
    case types.ON_EDIT_FILTER_QUERY:
    case types.ON_REMOVE_FILTER_QUERY:
    case types.ON_SET_SEARCH:
      return _extends({}, state, (_extends2 = {}, _extends2[name] = filter(state[name], action), _extends2));

    default:
      return state;
  }
}