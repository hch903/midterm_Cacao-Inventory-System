var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import * as types from './types';

export function setFilterIsOpen(name, isOpen) {
  return {
    type: types.ON_FILTER_OPEN_CHANGED,
    name: name,
    payload: { isOpen: isOpen }
  };
}

export function setFilterSortField(name, sortField) {
  return {
    type: types.ON_FILTER_SORT_FIELD_CHANGED,
    name: name,
    payload: { sortField: sortField }
  };
}

export function setFilterSortOrientation(name, sortOrientation) {
  return {
    type: types.ON_FILTER_SORT_FIELD_CHANGED,
    name: name,
    payload: { sortOrientation: sortOrientation }
  };
}

export function addFilterQuery(name, query) {
  return {
    type: types.ON_ADD_FILTER_QUERY,
    name: name,
    payload: _extends({}, query)
  };
}

export function setSearch(name, search) {
  return {
    type: types.ON_SET_SEARCH,
    name: name,
    payload: search
  };
}

export function editFilterQuery(name, index, query) {
  return {
    type: types.ON_EDIT_FILTER_QUERY,
    name: name,
    index: index,
    payload: _extends({}, query)
  };
}

export function removeFilterQuery(name, index) {
  return {
    type: types.ON_REMOVE_FILTER_QUERY,
    name: name,
    index: index
  };
}