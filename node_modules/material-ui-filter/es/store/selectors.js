var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

import moment from 'moment';

export var STRING_TYPE = 'string';
export var NUMBER_TYPE = 'number';
export var DATE_TYPE = 'date';
export var TIME_TYPE = 'time';
export var ARRAY_TYPE = 'array';
export var SELECT_FIELD_TYPE = 'select_field';

function getValue(source, fieldName) {
  var getSourceValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (fieldValue) {
    return fieldValue;
  };
  var isCaseSensitive = arguments[3];
  var type = arguments[4];

  if (source != null && getSourceValue(source)) {
    var fieldValue = getSourceValue(source)[fieldName];

    if (type === 'object') {
      return fieldValue ? fieldValue : {};
    }

    if ((typeof fieldValue === 'undefined' ? 'undefined' : _typeof(fieldValue)) === 'object' || fieldValue instanceof Object) {
      if (fieldValue.hasOwnProperty('label')) {
        fieldValue = fieldValue.label;
      }
    }

    if (type === 'date') {
      return new Date(fieldValue).setHours(0, 0, 0, 0);
    } else if (type === 'bool') {
      return fieldValue === undefined ? 'false' : fieldValue;
    } else {
      return isCaseSensitive === true ? String(fieldValue) : String(fieldValue).toUpperCase();
    }
  }
}

export function dynamicSort(sortField, sortOrientation, getSourceValue) {
  var sortOrder = sortOrientation ? 1 : -1;

  return function (x, y) {
    var a = getValue(x, sortField, getSourceValue);
    var b = getValue(y, sortField, getSourceValue);
    var result = a < b ? -1 : a > b ? 1 : 0;
    return result * sortOrder;
  };
}

export function selectFilterProps(filterName, filters) {
  var isOpen = false;
  var hasFilters = false;
  var sortField = null;
  var sortOrientation = true;
  var queries = [];
  var searchValue = null;

  if (filters !== undefined && filters[filterName] !== undefined) {
    var filter = filters[filterName];

    isOpen = filter.isOpen !== undefined ? filter.isOpen : isOpen;
    hasFilters = filter.queries !== undefined ? filter.queries.length : hasFilters;
    sortField = filter.sortField !== undefined ? filter.sortField : sortField;
    sortOrientation = filter.sortOrientation !== undefined ? filter.sortOrientation : sortOrientation;
    queries = filter.queries !== undefined ? filter.queries : queries;
    searchValue = filter.search !== undefined ? filter.search.value : searchValue;
  }

  return {
    isOpen: isOpen,
    hasFilters: hasFilters,
    sortField: sortField,
    sortOrientation: sortOrientation,
    queries: queries,
    searchValue: searchValue
  };
}

export function selectQueryProps(query) {
  var value = '';
  var operator = void 0;
  var field = void 0;
  var type = 'string';
  var isCaseSensitive = false;
  var isSet = false;

  if (query !== undefined) {
    value = query.value !== undefined ? query.value : value;
    operator = query.operator !== undefined ? query.operator : operator;
    field = query.field !== undefined ? query.field : field;
    type = query.type !== undefined ? query.type : type;
    isCaseSensitive = query.isCaseSensitive !== undefined ? query.isCaseSensitive : isCaseSensitive;
    isSet = field !== undefined && field !== null && operator !== undefined && operator !== null && value !== undefined;
  }

  return {
    value: value,
    operator: operator,
    field: field,
    type: type,
    isCaseSensitive: isCaseSensitive,
    isSet: isSet
  };
}

export function getFilteredList(filterName, filters, list, getSourceValue) {
  var _selectFilterProps = selectFilterProps(filterName, filters),
      sortField = _selectFilterProps.sortField,
      sortOrientation = _selectFilterProps.sortOrientation,
      queries = _selectFilterProps.queries,
      searchValue = _selectFilterProps.searchValue;

  var dateOptions = { day: '2-digit', month: '2-digit', year: 'numeric' };

  if (list == null || list.length < 1) {
    return [];
  }

  var result = [].concat(list);

  result = result.filter(function (row, i) {
    var show = true;

    if (queries) {
      for (var _iterator = queries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var query = _ref;

        var _selectQueryProps = selectQueryProps(query),
            value = _selectQueryProps.value,
            operator = _selectQueryProps.operator,
            field = _selectQueryProps.field,
            isCaseSensitive = _selectQueryProps.isCaseSensitive,
            isSet = _selectQueryProps.isSet,
            type = _selectQueryProps.type;

        if (isSet) {
          var fieldValue = getValue(row, field.value, getSourceValue, isCaseSensitive, type);

          if (type === 'date') {
            var queryDate = moment(value);

            switch (operator.value) {
              case '=':
                show = queryDate.isSame(fieldValue, 'day');
                break;

              case '!=':
                show = !queryDate.isSame(fieldValue, 'day');
                break;

              case '>':
                show = queryDate.isAfter(fieldValue, 'day');
                break;

              case '>=':
                show = queryDate.isSameOrAfter(fieldValue, 'day');
                break;

              case '<':
                show = queryDate.isBefore(fieldValue, 'day');
                break;

              case '<=':
                show = queryDate.isSameOrBefore(fieldValue, 'day');
                break;

              default:
                break;
            }

            if (!show) {
              return show;
            }
          } else if (type === 'bool') {
            var fieldVal = false;
            if (fieldValue === true || fieldValue === 'true') {
              fieldVal = true;
            }

            var queryVal = false;
            if (value === true || value === 'true') {
              queryVal = true;
            }

            show = fieldVal === queryVal;

            if (!show) {
              return show;
            }
          } else if (type === 'object') {

            show = JSON.stringify(fieldValue ? fieldValue : '').toUpperCase().indexOf(String(value ? value : '').toUpperCase()) !== -1;

            if (!show) {
              return show;
            }
          } else {
            var valueString = String(value);
            var fieldValueString = String(fieldValue);
            var queryValueString = isCaseSensitive === true ? valueString : valueString.toUpperCase();

            switch (operator.value) {
              case 'like':
                show = fieldValueString.indexOf(queryValueString) !== -1;
                break;

              case 'notlike':
                show = fieldValueString.indexOf(queryValueString) === -1;
                break;

              case '=':
                show = fieldValueString === queryValueString;
                break;

              case '>':
                show = fieldValueString.localeCompare(queryValueString) > 0;
                break;

              case '>=':
                show = fieldValueString.localeCompare(queryValueString) >= 0;
                break;

              case '<':
                show = fieldValueString.localeCompare(queryValueString) < 0;
                break;

              case '<=':
                show = fieldValueString.localeCompare(valueString) <= 0;
                break;

              default:
                break;
            }

            if (!show) {
              return show;
            }
          }
        }
      }
    }

    if (searchValue != null && searchValue !== '' && show) {
      show = JSON.stringify(row).toUpperCase().indexOf(String(searchValue).toUpperCase()) !== -1;
    }

    return show;
  });

  if (result !== undefined && sortField !== null) {
    result.sort(dynamicSort(sortField.value, sortOrientation, getSourceValue));
  }

  return result;
}