var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import * as filterActions from '../store/actions';
import * as filterSelectors from '../store/selectors';
import AppBar from '@material-ui/core/AppBar';
import Button from '@material-ui/core/Button';
import Divider from '@material-ui/core/Divider';
import Drawer from '@material-ui/core/Drawer';
import Icon from '@material-ui/core/Icon';
import IconButton from '@material-ui/core/IconButton';
import Input from '@material-ui/core/Input';
import ListSubheader from '@material-ui/core/ListSubheader';
import MenuIcon from '@material-ui/icons/Menu';
import OperatorField from './OperatorField';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import Toolbar from '@material-ui/core/Toolbar';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import { SearchField } from './SearchField';
import { SelectField } from 'muishift';
import { connect } from 'react-redux';
import { withTheme, withStyles } from '@material-ui/core/styles';

var styles = function styles(theme) {
  return {
    flex: {
      //flexGrow: 1
    },
    list: {
      zIndex: theme.zIndex.drawer + 2,
      width: 250
    },
    drawer: {
      zIndex: theme.zIndex.drawer + 2
    },
    typography: {
      useNextVariants: true
    }
  };
};

var FilterDrawer = function (_Component) {
  _inherits(FilterDrawer, _Component);

  function FilterDrawer() {
    var _temp, _this, _ret;

    _classCallCheck(this, FilterDrawer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleCloseFilter = function () {
      var _this$props = _this.props,
          setFilterIsOpen = _this$props.setFilterIsOpen,
          name = _this$props.name;


      setFilterIsOpen(name, false);
    }, _this.handleSortFieldChange = function (selectedField, fieldName) {
      var _this$props2 = _this.props,
          setFilterSortField = _this$props2.setFilterSortField,
          name = _this$props2.name;


      setFilterSortField(name, selectedField);
    }, _this.handleSortOrientationChange = function (orientation) {
      var _this$props3 = _this.props,
          setFilterSortOrientation = _this$props3.setFilterSortOrientation,
          name = _this$props3.name;


      setFilterSortOrientation(name, orientation);
    }, _this.handleAddFilterQuery = function () {
      var _this$props4 = _this.props,
          addFilterQuery = _this$props4.addFilterQuery,
          name = _this$props4.name,
          formatMessage = _this$props4.formatMessage;


      addFilterQuery(name, {
        operator: {
          value: 'like',
          label: formatMessage ? formatMessage({ id: 'operator_like_label' }) : 'operator_like_label'
        }
      });
    }, _this.handleQueryChange = function (index, field, value, operator) {
      var _change;

      var _this$props5 = _this.props,
          editFilterQuery = _this$props5.editFilterQuery,
          name = _this$props5.name;


      var change = (_change = {}, _change[field] = value, _change);

      if (operator !== undefined) {
        change.operator = operator;
      }

      editFilterQuery(name, index, change);
    }, _this.getFieldType = function (currentField) {
      var fields = _this.props.fields;


      if (!currentField) {
        return 'string';
      }

      var fieldType = 'string';

      fields.map(function (field) {
        if (field.name === currentField.value) {
          fieldType = field.type ? field.type : 'string';
        }
        return field;
      });

      return fieldType;
    }, _this.getFirstOperator = function (currentField) {
      var operators = _this.props.operators;

      var fieldType = _this.getFieldType(currentField);

      if (!fieldType) {
        return undefined;
      }

      var op = undefined;

      operators.map(function (operator) {
        if (operator.type === fieldType || operator.type === 'string' && fieldType === undefined) {
          op = { value: operator.operators[0].value, label: operator.operators[0].label };
        }
        return op;
      });

      return op;
    }, _this.handleFieldChange = function (i, field, val) {
      var _editFilterQuery;

      var _this$props6 = _this.props,
          editFilterQuery = _this$props6.editFilterQuery,
          name = _this$props6.name;

      var operator = _this.getFirstOperator(val);
      var type = _this.getFieldType(val);

      editFilterQuery(name, i, (_editFilterQuery = {}, _editFilterQuery[field] = val, _editFilterQuery.type = type, _editFilterQuery.operator = operator, _editFilterQuery.value = '', _editFilterQuery));
    }, _this.handleQueryDelete = function (index) {
      var _this$props7 = _this.props,
          removeFilterQuery = _this$props7.removeFilterQuery,
          name = _this$props7.name;


      removeFilterQuery(name, index);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  FilterDrawer.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        theme = _props.theme,
        formatMessage = _props.formatMessage,
        filters = _props.filters,
        name = _props.name,
        fields = _props.fields,
        operators = _props.operators,
        DateTimeFormat = _props.DateTimeFormat,
        locale = _props.locale,
        okLabel = _props.okLabel,
        cancelLabel = _props.cancelLabel,
        setFilterIsOpen = _props.setFilterIsOpen,
        classes = _props.classes;

    var _filterSelectors$sele = filterSelectors.selectFilterProps(name, filters),
        isOpen = _filterSelectors$sele.isOpen,
        sortField = _filterSelectors$sele.sortField,
        sortOrientation = _filterSelectors$sele.sortOrientation,
        queries = _filterSelectors$sele.queries;

    return React.createElement(
      'div',
      null,
      isOpen && React.createElement(
        Drawer,
        {
          variant: 'persistent',
          classes: { paper: classes.drawer },
          anchor: 'right',
          open: isOpen,
          width: this.props.width,
          onClose: function onClose() {
            setFilterIsOpen(name, false);
          }
        },
        React.createElement(
          'div',
          { className: classes.list },
          React.createElement(
            AppBar,
            { position: 'static' },
            React.createElement(
              Toolbar,
              null,
              React.createElement(
                Tooltip,
                {
                  id: 'tooltip-bottom-end',
                  title: formatMessage ? formatMessage({ id: 'close_filter' }) : 'Close filter',
                  placement: 'bottom-end'
                },
                React.createElement(
                  IconButton,
                  { color: 'inherit', onClick: this.handleCloseFilter },
                  React.createElement(
                    Icon,
                    null,
                    'chevron_right'
                  )
                )
              ),
              React.createElement(
                Typography,
                { variant: 'h6', color: 'inherit' },
                formatMessage ? formatMessage({ id: 'filter' }) : 'Filter'
              )
            )
          ),
          React.createElement(
            Toolbar,
            null,
            React.createElement(
              'div',
              { style: { maxWidth: 160 } },
              React.createElement(SelectField, {
                input: { value: sortField },
                items: fields.map(function (suggestion) {
                  return {
                    value: suggestion.name,
                    label: suggestion.label
                  };
                }),
                itemToString: function itemToString(item) {
                  return item ? item.label : '';
                },
                onChange: this.handleSortFieldChange,
                inputProps: {
                  fullWidth: true,
                  placeholder: formatMessage ? formatMessage({ id: 'select_field' }) : 'Select field'
                }
              })
            ),
            React.createElement(
              Tooltip,
              {
                id: 'tooltip-bottom-end',
                title: formatMessage ? formatMessage({ id: 'change_sort_orientation' }) : 'Change orientation',
                placement: 'bottom-end'
              },
              React.createElement(
                IconButton,
                {
                  onClick: function onClick() {
                    _this2.handleSortOrientationChange(!sortOrientation);
                  },
                  color: sortOrientation ? 'primary' : 'secondary'
                },
                React.createElement(
                  Icon,
                  null,
                  'sort_by_alpha'
                )
              )
            )
          ),
          React.createElement(Divider, null),
          React.createElement(
            Toolbar,
            null,
            React.createElement(
              Typography,
              { variant: 'subtitle1', color: 'inherit', className: classes.flex },
              formatMessage ? formatMessage({ id: 'filter' }) : 'Filter'
            ),
            React.createElement(
              Tooltip,
              {
                id: 'tooltip-bottom-start',
                title: formatMessage ? formatMessage({ id: 'add_filter' }) : 'Add filter',
                placement: 'bottom-end'
              },
              React.createElement(
                IconButton,
                { onClick: this.handleAddFilterQuery, color: 'primary' },
                React.createElement(
                  Icon,
                  null,
                  'add_circle'
                )
              )
            )
          ),
          React.createElement(
            'div',
            null,
            queries.map(function (query, i) {
              var _filterSelectors$sele2 = filterSelectors.selectQueryProps(query),
                  field = _filterSelectors$sele2.field;

              return React.createElement(
                'div',
                { key: i },
                React.createElement(
                  Toolbar,
                  null,
                  React.createElement(
                    'div',
                    { style: { maxWidth: 160 } },
                    React.createElement(SelectField, {
                      input: { value: field },
                      items: fields.map(function (suggestion) {
                        return {
                          value: suggestion.name,
                          label: suggestion.label
                        };
                      }),
                      itemToString: function itemToString(item) {
                        return item ? item.label : '';
                      },
                      onChange: function onChange(val) {
                        _this2.handleFieldChange(i, 'field', val);
                      },
                      inputProps: {
                        fullWidth: true,
                        placeholder: formatMessage ? formatMessage({ id: 'select_field' }) : 'Select field'
                      }
                    })
                  )
                ),
                React.createElement(OperatorField, {
                  queryIndex: i,
                  currentField: field,
                  query: query,
                  fields: fields,
                  operators: operators,
                  handleQueryChange: _this2.handleQueryChange,
                  formatMessage: formatMessage,
                  onClick: function onClick() {
                    _this2.handleQueryDelete(i);
                  }
                }),
                React.createElement(SearchField, {
                  id: 'searchField',
                  queryIndex: i,
                  currentField: field,
                  query: query,
                  DateTimeFormat: DateTimeFormat,
                  locale: locale,
                  theme: theme,
                  formatMessage: formatMessage,
                  handleQueryChange: _this2.handleQueryChange,
                  fields: fields,
                  okLabel: okLabel,
                  cancelLabel: cancelLabel
                }),
                React.createElement(Divider, null)
              );
            })
          )
        )
      )
    );
  };

  return FilterDrawer;
}(Component);

FilterDrawer.propTypes = process.env.NODE_ENV !== "production" ? {
  formatMessage: PropTypes.func,
  theme: PropTypes.object.isRequired,
  name: PropTypes.string.isRequired,
  fields: PropTypes.array.isRequired,
  setFilterIsOpen: PropTypes.func.isRequired
} : {};

var mapStateToProps = function mapStateToProps(state, ownProps) {
  var filters = state.filters,
      userSetOperators = state.userSetOperators;
  var fields = ownProps.fields,
      formatMessage = ownProps.formatMessage;


  var allOperators = [{ value: 'like', label: formatMessage ? formatMessage({ id: 'operator_like_label' }) : 'Like' }, { value: 'notlike', label: formatMessage ? formatMessage({ id: 'operator_notlike_label' }) : 'Not like' }, { value: '=', label: formatMessage ? formatMessage({ id: 'operator_equal_label' }) : '=' }, { value: '!=', label: formatMessage ? formatMessage({ id: 'operator_notequal_label' }) : '!=' }, { value: '>', label: '>' }, { value: '>=', label: '>=' }, { value: '<', label: '<' }, { value: '<=', label: '<=' }, { value: 'novalue', label: formatMessage ? formatMessage({ id: 'operator_novalue_label' }) : 'No value' }, { value: 'contains', label: formatMessage ? formatMessage({ id: 'operator_contains_label' }) : 'Contains' }];

  var operators = [{
    type: 'string',
    operators: allOperators.filter(function (operator) {
      return operator.value === 'like' || operator.value === 'notlike' || operator.value === '=' || operator.value === '!=' || operator.value === 'novalue';
    })
  }, {
    type: 'date',
    operators: allOperators.filter(function (operator) {
      return operator.value === '=' || operator.value === '!=' || operator.value === '<=' || operator.value === '>=' || operator.value === '<' || operator.value === '>';
    })
  }, {
    type: 'bool',
    operators: allOperators.filter(function (operator) {
      return operator.value === '=';
    })
  }, {
    type: 'object',
    operators: allOperators.filter(function (operator) {
      return operator.value === 'contains';
    })
  }];

  return {
    fields: fields,
    operators: userSetOperators ? userSetOperators : operators,
    filters: filters,
    formatMessage: formatMessage
  };
};

export default connect(mapStateToProps, _extends({}, filterActions))(withTheme()(withStyles(styles, { withTheme: true })(FilterDrawer)));