'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.setFilterIsOpen = setFilterIsOpen;
exports.setFilterSortField = setFilterSortField;
exports.setFilterSortOrientation = setFilterSortOrientation;
exports.addFilterQuery = addFilterQuery;
exports.setSearch = setSearch;
exports.editFilterQuery = editFilterQuery;
exports.removeFilterQuery = removeFilterQuery;

var _types = require('./types');

var types = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function setFilterIsOpen(name, isOpen) {
  return {
    type: types.ON_FILTER_OPEN_CHANGED,
    name: name,
    payload: { isOpen: isOpen }
  };
}

function setFilterSortField(name, sortField) {
  return {
    type: types.ON_FILTER_SORT_FIELD_CHANGED,
    name: name,
    payload: { sortField: sortField }
  };
}

function setFilterSortOrientation(name, sortOrientation) {
  return {
    type: types.ON_FILTER_SORT_FIELD_CHANGED,
    name: name,
    payload: { sortOrientation: sortOrientation }
  };
}

function addFilterQuery(name, query) {
  return {
    type: types.ON_ADD_FILTER_QUERY,
    name: name,
    payload: _extends({}, query)
  };
}

function setSearch(name, search) {
  return {
    type: types.ON_SET_SEARCH,
    name: name,
    payload: search
  };
}

function editFilterQuery(name, index, query) {
  return {
    type: types.ON_EDIT_FILTER_QUERY,
    name: name,
    index: index,
    payload: _extends({}, query)
  };
}

function removeFilterQuery(name, index) {
  return {
    type: types.ON_REMOVE_FILTER_QUERY,
    name: name,
    index: index
  };
}