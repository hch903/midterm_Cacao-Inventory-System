{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport * as filterActions from '../store/actions';\nimport * as filterSelectors from '../store/selectors';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport OperatorField from './OperatorField';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { SearchField } from './SearchField';\nimport { SelectField } from 'muishift';\nimport { connect } from 'react-redux';\nimport { withTheme, withStyles } from '@material-ui/core/styles';\n\nvar styles = function styles(theme) {\n  return {\n    flex: {//flexGrow: 1\n    },\n    list: {\n      zIndex: theme.zIndex.drawer + 2,\n      width: 250\n    },\n    drawer: {\n      zIndex: theme.zIndex.drawer + 2\n    },\n    typography: {\n      useNextVariants: true\n    }\n  };\n};\n\nvar FilterDrawer = function (_Component) {\n  _inherits(FilterDrawer, _Component);\n\n  function FilterDrawer() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, FilterDrawer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleCloseFilter = function () {\n      var _this$props = _this.props,\n          setFilterIsOpen = _this$props.setFilterIsOpen,\n          name = _this$props.name;\n      setFilterIsOpen(name, false);\n    }, _this.handleSortFieldChange = function (selectedField, fieldName) {\n      var _this$props2 = _this.props,\n          setFilterSortField = _this$props2.setFilterSortField,\n          name = _this$props2.name;\n      setFilterSortField(name, selectedField);\n    }, _this.handleSortOrientationChange = function (orientation) {\n      var _this$props3 = _this.props,\n          setFilterSortOrientation = _this$props3.setFilterSortOrientation,\n          name = _this$props3.name;\n      setFilterSortOrientation(name, orientation);\n    }, _this.handleAddFilterQuery = function () {\n      var _this$props4 = _this.props,\n          addFilterQuery = _this$props4.addFilterQuery,\n          name = _this$props4.name,\n          formatMessage = _this$props4.formatMessage;\n      addFilterQuery(name, {\n        operator: {\n          value: 'like',\n          label: formatMessage ? formatMessage({\n            id: 'operator_like_label'\n          }) : 'operator_like_label'\n        }\n      });\n    }, _this.handleQueryChange = function (index, field, value, operator) {\n      var _change;\n\n      var _this$props5 = _this.props,\n          editFilterQuery = _this$props5.editFilterQuery,\n          name = _this$props5.name;\n      var change = (_change = {}, _change[field] = value, _change);\n\n      if (operator !== undefined) {\n        change.operator = operator;\n      }\n\n      editFilterQuery(name, index, change);\n    }, _this.getFieldType = function (currentField) {\n      var fields = _this.props.fields;\n\n      if (!currentField) {\n        return 'string';\n      }\n\n      var fieldType = 'string';\n      fields.map(function (field) {\n        if (field.name === currentField.value) {\n          fieldType = field.type ? field.type : 'string';\n        }\n\n        return field;\n      });\n      return fieldType;\n    }, _this.getFirstOperator = function (currentField) {\n      var operators = _this.props.operators;\n\n      var fieldType = _this.getFieldType(currentField);\n\n      if (!fieldType) {\n        return undefined;\n      }\n\n      var op = undefined;\n      operators.map(function (operator) {\n        if (operator.type === fieldType || operator.type === 'string' && fieldType === undefined) {\n          op = {\n            value: operator.operators[0].value,\n            label: operator.operators[0].label\n          };\n        }\n\n        return op;\n      });\n      return op;\n    }, _this.handleFieldChange = function (i, field, val) {\n      var _editFilterQuery;\n\n      var _this$props6 = _this.props,\n          editFilterQuery = _this$props6.editFilterQuery,\n          name = _this$props6.name;\n\n      var operator = _this.getFirstOperator(val);\n\n      var type = _this.getFieldType(val);\n\n      editFilterQuery(name, i, (_editFilterQuery = {}, _editFilterQuery[field] = val, _editFilterQuery.type = type, _editFilterQuery.operator = operator, _editFilterQuery.value = '', _editFilterQuery));\n    }, _this.handleQueryDelete = function (index) {\n      var _this$props7 = _this.props,\n          removeFilterQuery = _this$props7.removeFilterQuery,\n          name = _this$props7.name;\n      removeFilterQuery(name, index);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  FilterDrawer.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        theme = _props.theme,\n        formatMessage = _props.formatMessage,\n        filters = _props.filters,\n        name = _props.name,\n        fields = _props.fields,\n        operators = _props.operators,\n        DateTimeFormat = _props.DateTimeFormat,\n        locale = _props.locale,\n        okLabel = _props.okLabel,\n        cancelLabel = _props.cancelLabel,\n        setFilterIsOpen = _props.setFilterIsOpen,\n        classes = _props.classes;\n\n    var _filterSelectors$sele = filterSelectors.selectFilterProps(name, filters),\n        isOpen = _filterSelectors$sele.isOpen,\n        sortField = _filterSelectors$sele.sortField,\n        sortOrientation = _filterSelectors$sele.sortOrientation,\n        queries = _filterSelectors$sele.queries;\n\n    return React.createElement('div', null, isOpen && React.createElement(Drawer, {\n      variant: 'persistent',\n      classes: {\n        paper: classes.drawer\n      },\n      anchor: 'right',\n      open: isOpen,\n      width: this.props.width,\n      onClose: function onClose() {\n        setFilterIsOpen(name, false);\n      }\n    }, React.createElement('div', {\n      className: classes.list\n    }, React.createElement(AppBar, {\n      position: 'static'\n    }, React.createElement(Toolbar, null, React.createElement(Tooltip, {\n      id: 'tooltip-bottom-end',\n      title: formatMessage ? formatMessage({\n        id: 'close_filter'\n      }) : 'Close filter',\n      placement: 'bottom-end'\n    }, React.createElement(IconButton, {\n      color: 'inherit',\n      onClick: this.handleCloseFilter\n    }, React.createElement(Icon, null, 'chevron_right'))), React.createElement(Typography, {\n      variant: 'h6',\n      color: 'inherit'\n    }, formatMessage ? formatMessage({\n      id: 'filter'\n    }) : 'Filter'))), React.createElement(Toolbar, null, React.createElement('div', {\n      style: {\n        maxWidth: 160\n      }\n    }, React.createElement(SelectField, {\n      input: {\n        value: sortField\n      },\n      items: fields.map(function (suggestion) {\n        return {\n          value: suggestion.name,\n          label: suggestion.label\n        };\n      }),\n      itemToString: function itemToString(item) {\n        return item ? item.label : '';\n      },\n      onChange: this.handleSortFieldChange,\n      inputProps: {\n        fullWidth: true,\n        placeholder: formatMessage ? formatMessage({\n          id: 'select_field'\n        }) : 'Select field'\n      }\n    })), React.createElement(Tooltip, {\n      id: 'tooltip-bottom-end',\n      title: formatMessage ? formatMessage({\n        id: 'change_sort_orientation'\n      }) : 'Change orientation',\n      placement: 'bottom-end'\n    }, React.createElement(IconButton, {\n      onClick: function onClick() {\n        _this2.handleSortOrientationChange(!sortOrientation);\n      },\n      color: sortOrientation ? 'primary' : 'secondary'\n    }, React.createElement(Icon, null, 'sort_by_alpha')))), React.createElement(Divider, null), React.createElement(Toolbar, null, React.createElement(Typography, {\n      variant: 'subtitle1',\n      color: 'inherit',\n      className: classes.flex\n    }, formatMessage ? formatMessage({\n      id: 'filter'\n    }) : 'Filter'), React.createElement(Tooltip, {\n      id: 'tooltip-bottom-start',\n      title: formatMessage ? formatMessage({\n        id: 'add_filter'\n      }) : 'Add filter',\n      placement: 'bottom-end'\n    }, React.createElement(IconButton, {\n      onClick: this.handleAddFilterQuery,\n      color: 'primary'\n    }, React.createElement(Icon, null, 'add_circle')))), React.createElement('div', null, queries.map(function (query, i) {\n      var _filterSelectors$sele2 = filterSelectors.selectQueryProps(query),\n          field = _filterSelectors$sele2.field;\n\n      return React.createElement('div', {\n        key: i\n      }, React.createElement(Toolbar, null, React.createElement('div', {\n        style: {\n          maxWidth: 160\n        }\n      }, React.createElement(SelectField, {\n        input: {\n          value: field\n        },\n        items: fields.map(function (suggestion) {\n          return {\n            value: suggestion.name,\n            label: suggestion.label\n          };\n        }),\n        itemToString: function itemToString(item) {\n          return item ? item.label : '';\n        },\n        onChange: function onChange(val) {\n          _this2.handleFieldChange(i, 'field', val);\n        },\n        inputProps: {\n          fullWidth: true,\n          placeholder: formatMessage ? formatMessage({\n            id: 'select_field'\n          }) : 'Select field'\n        }\n      }))), React.createElement(OperatorField, {\n        queryIndex: i,\n        currentField: field,\n        query: query,\n        fields: fields,\n        operators: operators,\n        handleQueryChange: _this2.handleQueryChange,\n        formatMessage: formatMessage,\n        onClick: function onClick() {\n          _this2.handleQueryDelete(i);\n        }\n      }), React.createElement(SearchField, {\n        id: 'searchField',\n        queryIndex: i,\n        currentField: field,\n        query: query,\n        DateTimeFormat: DateTimeFormat,\n        locale: locale,\n        theme: theme,\n        formatMessage: formatMessage,\n        handleQueryChange: _this2.handleQueryChange,\n        fields: fields,\n        okLabel: okLabel,\n        cancelLabel: cancelLabel\n      }), React.createElement(Divider, null));\n    })))));\n  };\n\n  return FilterDrawer;\n}(Component);\n\nFilterDrawer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  formatMessage: PropTypes.func,\n  theme: PropTypes.object.isRequired,\n  name: PropTypes.string.isRequired,\n  fields: PropTypes.array.isRequired,\n  setFilterIsOpen: PropTypes.func.isRequired\n} : {};\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  var filters = state.filters,\n      userSetOperators = state.userSetOperators;\n  var fields = ownProps.fields,\n      formatMessage = ownProps.formatMessage;\n  var allOperators = [{\n    value: 'like',\n    label: formatMessage ? formatMessage({\n      id: 'operator_like_label'\n    }) : 'Like'\n  }, {\n    value: 'notlike',\n    label: formatMessage ? formatMessage({\n      id: 'operator_notlike_label'\n    }) : 'Not like'\n  }, {\n    value: '=',\n    label: formatMessage ? formatMessage({\n      id: 'operator_equal_label'\n    }) : '='\n  }, {\n    value: '!=',\n    label: formatMessage ? formatMessage({\n      id: 'operator_notequal_label'\n    }) : '!='\n  }, {\n    value: '>',\n    label: '>'\n  }, {\n    value: '>=',\n    label: '>='\n  }, {\n    value: '<',\n    label: '<'\n  }, {\n    value: '<=',\n    label: '<='\n  }, {\n    value: 'novalue',\n    label: formatMessage ? formatMessage({\n      id: 'operator_novalue_label'\n    }) : 'No value'\n  }, {\n    value: 'contains',\n    label: formatMessage ? formatMessage({\n      id: 'operator_contains_label'\n    }) : 'Contains'\n  }];\n  var operators = [{\n    type: 'string',\n    operators: allOperators.filter(function (operator) {\n      return operator.value === 'like' || operator.value === 'notlike' || operator.value === '=' || operator.value === '!=' || operator.value === 'novalue';\n    })\n  }, {\n    type: 'date',\n    operators: allOperators.filter(function (operator) {\n      return operator.value === '=' || operator.value === '!=' || operator.value === '<=' || operator.value === '>=' || operator.value === '<' || operator.value === '>';\n    })\n  }, {\n    type: 'bool',\n    operators: allOperators.filter(function (operator) {\n      return operator.value === '=';\n    })\n  }, {\n    type: 'object',\n    operators: allOperators.filter(function (operator) {\n      return operator.value === 'contains';\n    })\n  }];\n  return {\n    fields: fields,\n    operators: userSetOperators ? userSetOperators : operators,\n    filters: filters,\n    formatMessage: formatMessage\n  };\n};\n\nexport default connect(mapStateToProps, _extends({}, filterActions))(withTheme()(withStyles(styles, {\n  withTheme: true\n})(FilterDrawer)));","map":null,"metadata":{},"sourceType":"module"}