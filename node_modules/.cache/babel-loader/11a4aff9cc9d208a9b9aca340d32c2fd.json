{"ast":null,"code":"/**\n * Bundle of @devexpress/dx-grid-core\n * Generated: 2019-03-28\n * Version: 1.10.5\n * License: https://js.devexpress.com/Licensing\n */\nimport { slice, easeOutCubic } from '@devexpress/dx-core';\nvar GRID_GROUP_TYPE = Symbol('group');\nvar GRID_GROUP_CHECK = Symbol(GRID_GROUP_TYPE.toString() + \"_check\");\nvar GRID_GROUP_LEVEL_KEY = Symbol(GRID_GROUP_TYPE.toString() + \"_levelKey\");\nvar GRID_GROUP_COLLAPSED_ROWS = Symbol(GRID_GROUP_TYPE.toString() + \"_collapsedRows\");\n\nvar warnIfRowIdUndefined = function warnIfRowIdUndefined(getRowId) {\n  return function (row) {\n    var result = getRowId(row);\n\n    if (!row[GRID_GROUP_CHECK] && result === undefined) {\n      // tslint:disable-next-line: no-console\n      console.warn('The row id is undefined. Check the getRowId function. The row is', row);\n    }\n\n    return result;\n  };\n};\n\nvar rowIdGetter = function rowIdGetter(getRowId, rows) {\n  if (!getRowId) {\n    var map_1 = new Map(rows.map(function (row, rowIndex) {\n      return [row, rowIndex];\n    }));\n    return function (row) {\n      return map_1.get(row);\n    };\n  }\n\n  return warnIfRowIdUndefined(getRowId);\n};\n\nvar defaultGetCellValue = function defaultGetCellValue(row, columnName) {\n  return row[columnName];\n};\n\nvar cellValueGetter = function cellValueGetter(getCellValue, columns) {\n  if (getCellValue === void 0) {\n    getCellValue = defaultGetCellValue;\n  }\n\n  var useFastAccessor = true;\n  var map = columns.reduce(function (acc, column) {\n    if (column.getCellValue) {\n      useFastAccessor = false;\n      acc[column.name] = column.getCellValue;\n    }\n\n    return acc;\n  }, {});\n\n  if (useFastAccessor) {\n    return getCellValue;\n  }\n\n  return function (row, columnName) {\n    return map[columnName] ? map[columnName](row, columnName) : getCellValue(row, columnName);\n  };\n};\n\nvar changeColumnSorting = function changeColumnSorting(state, _a) {\n  var columnName = _a.columnName,\n      direction = _a.direction,\n      keepOther = _a.keepOther,\n      sortIndex = _a.sortIndex;\n  var sorting = state.sorting;\n  var nextSorting = [];\n\n  if (keepOther === true) {\n    nextSorting = sorting;\n  }\n\n  if (Array.isArray(keepOther)) {\n    nextSorting = slice(sorting).filter(function (s) {\n      return keepOther.indexOf(s.columnName) > -1;\n    });\n  }\n\n  var columnSortingIndex = sorting.findIndex(function (s) {\n    return s.columnName === columnName;\n  });\n  var columnSorting = sorting[columnSortingIndex];\n  var newColumnSorting = {\n    columnName: columnName,\n    direction: direction || (!columnSorting || columnSorting.direction === 'desc' ? 'asc' : 'desc')\n  };\n\n  if (columnSortingIndex > -1) {\n    nextSorting = slice(nextSorting);\n    nextSorting.splice(columnSortingIndex, 1);\n  }\n\n  if (direction !== null) {\n    var newIndexFallback = columnSortingIndex > -1 ? columnSortingIndex : nextSorting.length;\n    var newIndex = sortIndex !== undefined ? sortIndex : newIndexFallback;\n    nextSorting = slice(nextSorting);\n    nextSorting.splice(newIndex, 0, newColumnSorting);\n  }\n\n  return {\n    sorting: nextSorting\n  };\n};\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n}\n\nvar unique = function unique(arr) {\n  return __spread(Array.from(new Set(arr)));\n};\n\nvar getColumnSortingDirection = function getColumnSortingDirection(sorting, columnName) {\n  var columnSorting = sorting.filter(function (s) {\n    return s.columnName === columnName;\n  })[0];\n  return columnSorting ? columnSorting.direction : null;\n};\n\nvar getPersistentSortedColumns = function getPersistentSortedColumns(sorting, columnExtensions) {\n  if (columnExtensions === void 0) {\n    columnExtensions = [];\n  }\n\n  return columnExtensions.reduce(function (acc, _a) {\n    var columnName = _a.columnName,\n        sortingEnabled = _a.sortingEnabled;\n\n    if (sortingEnabled === false) {\n      if (sorting.findIndex(function (sortItem) {\n        return sortItem.columnName === columnName;\n      }) > -1) {\n        acc.push(columnName);\n      }\n    }\n\n    return acc;\n  }, []);\n};\n\nvar calculateKeepOther = function calculateKeepOther(sorting, keepOther, persistentSortedColumns) {\n  if (persistentSortedColumns === void 0) {\n    persistentSortedColumns = [];\n  }\n\n  if (!persistentSortedColumns.length) return keepOther;\n  if (!keepOther) return persistentSortedColumns;\n  return Array.isArray(keepOther) ? unique(__spread(keepOther, persistentSortedColumns)) : unique(__spread(sorting.map(function (item) {\n    return item.columnName;\n  }), persistentSortedColumns));\n};\n/* eslint-disable no-plusplus, no-param-reassign, no-use-before-define, no-constant-condition */\n\n/* tslint:disable no-increment-decrement */\n\n\nvar merge = function merge(array, auxiliary, lo, mid, hi, compare) {\n  var i = lo;\n  var j = mid + 1;\n  var k = lo;\n\n  while (true) {\n    var cmp = compare(array[i], array[j]);\n\n    if (cmp <= 0) {\n      auxiliary[k++] = array[i++];\n\n      if (i > mid) {\n        do {\n          auxiliary[k++] = array[j++];\n        } while (j <= hi);\n\n        break;\n      }\n    } else {\n      auxiliary[k++] = array[j++];\n\n      if (j > hi) {\n        do {\n          auxiliary[k++] = array[i++];\n        } while (i <= mid);\n\n        break;\n      }\n    }\n  }\n};\n\nvar sortArrayToAuxiliary = function sortArrayToAuxiliary(array, auxiliary, lo, hi, compare) {\n  if (hi < lo) return;\n\n  if (hi === lo) {\n    auxiliary[lo] = array[lo];\n    return;\n  }\n\n  var mid = Math.floor(lo + (hi - lo) / 2);\n  sortAuxiliaryToArray(array, auxiliary, lo, mid, compare);\n  sortAuxiliaryToArray(array, auxiliary, mid + 1, hi, compare);\n  merge(array, auxiliary, lo, mid, hi, compare);\n};\n\nvar sortAuxiliaryToArray = function sortAuxiliaryToArray(array, auxiliary, lo, hi, compare) {\n  if (hi <= lo) return;\n  var mid = Math.floor(lo + (hi - lo) / 2);\n  sortArrayToAuxiliary(array, auxiliary, lo, mid, compare);\n  sortArrayToAuxiliary(array, auxiliary, mid + 1, hi, compare);\n  merge(auxiliary, array, lo, mid, hi, compare);\n};\n\nvar mergeSort = function mergeSort(array, compare) {\n  if (compare === void 0) {\n    compare = function compare(a, b) {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    };\n  }\n\n  var result = slice(array);\n  var auxiliary = slice(array);\n  sortAuxiliaryToArray(result, auxiliary, 0, result.length - 1, compare);\n  return result;\n};\n\nvar NODE_CHECK = Symbol('node');\n\nvar rowsToTree = function rowsToTree(rows, getRowLevelKey) {\n  if (!rows.length) return rows;\n  var levels = [{\n    children: []\n  }];\n  rows.forEach(function (row) {\n    var _a;\n\n    var levelKey = getRowLevelKey(row);\n\n    if (levelKey) {\n      var levelIndex = levels.slice(1).findIndex(function (level) {\n        return getRowLevelKey(level.root) === levelKey;\n      }) + 1;\n\n      if (levelIndex > 0) {\n        levels.splice(levelIndex, levels.length - levelIndex);\n      }\n\n      var node = (_a = {}, _a[NODE_CHECK] = true, _a.root = row, _a.children = [], _a);\n      levels[levels.length - 1].children.push(node);\n      levels.push(node);\n    } else {\n      levels[levels.length - 1].children.push(row);\n    }\n  });\n  return levels[0].children;\n};\n\nvar treeToRows = function treeToRows(tree, rows) {\n  if (rows === void 0) {\n    rows = [];\n  }\n\n  if (!tree.length) return tree;\n  return tree.reduce(function (acc, node) {\n    if (node[NODE_CHECK]) {\n      acc.push(node.root);\n      treeToRows(node.children, rows);\n    } else {\n      acc.push(node);\n    }\n\n    return acc;\n  }, rows);\n};\n\nvar defaultCompare = function defaultCompare(a, b) {\n  if (a === b) return 0;\n\n  if (a === null) {\n    return b === undefined ? -1 : 1;\n  }\n\n  if (a === undefined) {\n    return 1;\n  }\n\n  if (b === null || b === undefined) {\n    return -1;\n  }\n\n  return a < b ? -1 : 1;\n};\n\nvar createCompare = function createCompare(sorting, getColumnCompare, getComparableValue) {\n  return sorting.reduceRight(function (prevCompare, columnSorting) {\n    var columnName = columnSorting.columnName;\n    var inverse = columnSorting.direction === 'desc';\n    var columnCompare = getColumnCompare && getColumnCompare(columnName) || defaultCompare;\n    return function (aRow, bRow) {\n      var a = getComparableValue(aRow, columnName);\n      var b = getComparableValue(bRow, columnName);\n      var result = columnCompare(a, b);\n\n      if (result !== 0) {\n        return inverse ? -result : result;\n      }\n\n      return prevCompare(aRow, bRow);\n    };\n  }, function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return 0;\n  });\n};\n\nvar sortTree = function sortTree(tree, compare) {\n  var sortedTree = tree.map(function (node) {\n    if (node[NODE_CHECK]) {\n      return _assign({}, node, {\n        children: sortTree(node.children, compare)\n      });\n    }\n\n    return node;\n  });\n  return mergeSort(sortedTree, function (a, b) {\n    return compare(a[NODE_CHECK] ? a.root : a, b[NODE_CHECK] ? b.root : b);\n  });\n};\n\nvar sortHierarchicalRows = function sortHierarchicalRows(rows, compare, getRowLevelKey) {\n  var tree = rowsToTree(rows, getRowLevelKey);\n  var sortedTree = sortTree(tree, compare);\n  return treeToRows(sortedTree);\n};\n\nvar sortedRows = function sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey) {\n  if (!sorting.length || !rows.length) return rows;\n  var compare;\n\n  if (!getRowLevelKey) {\n    compare = createCompare(sorting, getColumnCompare, getCellValue);\n    return mergeSort(rows.slice(), compare);\n  }\n\n  compare = createCompare(sorting, getColumnCompare, function (row, columnName) {\n    if (isGroupRow && isGroupRow(row)) {\n      if (row.groupedBy === columnName) {\n        return row.value;\n      }\n\n      return undefined;\n    }\n\n    return getCellValue(row, columnName);\n  });\n  return sortHierarchicalRows(rows, compare, getRowLevelKey);\n};\n\nvar changeColumnFilter = function changeColumnFilter(filters, _a) {\n  var columnName = _a.columnName,\n      config = _a.config;\n  var filterIndex = filters.findIndex(function (f) {\n    return f.columnName === columnName;\n  });\n  var nextState = slice(filters);\n\n  if (config) {\n    var filter = _assign({\n      columnName: columnName\n    }, config);\n\n    if (filterIndex > -1) {\n      nextState.splice(filterIndex, 1, filter);\n    } else {\n      nextState.push(filter);\n    }\n  } else if (filterIndex > -1) {\n    nextState.splice(filterIndex, 1);\n  }\n\n  return nextState;\n};\n\nvar getColumnFilterConfig = function getColumnFilterConfig(filters, columnName) {\n  return filters.length && filters.filter(function (s) {\n    return s.columnName === columnName;\n  })[0] || null;\n};\n\nvar filterExpression = function filterExpression(filters, expression) {\n  // tslint:disable-next-line: no-object-literal-type-assertion\n  var selfFilterExpr = {\n    filters: filters,\n    operator: 'and'\n  };\n\n  if (!expression) {\n    return selfFilterExpr;\n  }\n\n  return {\n    operator: 'and',\n    filters: [expression, selfFilterExpr]\n  };\n};\n\nvar operators = {\n  or: function or(predicates) {\n    return function (row) {\n      return predicates.reduce(function (acc, predicate) {\n        return acc || predicate(row);\n      }, false);\n    };\n  },\n  and: function and(predicates) {\n    return function (row) {\n      return predicates.reduce(function (acc, predicate) {\n        return acc && predicate(row);\n      }, true);\n    };\n  }\n};\n\nvar toLowerCase = function toLowerCase(value) {\n  return String(value).toLowerCase();\n};\n\nvar operationPredicates = {\n  contains: function contains(value, filter) {\n    return toLowerCase(value).indexOf(toLowerCase(filter.value)) > -1;\n  },\n  notContains: function notContains(value, filter) {\n    return toLowerCase(value).indexOf(toLowerCase(filter.value)) === -1;\n  },\n  startsWith: function startsWith(value, filter) {\n    return toLowerCase(value).startsWith(toLowerCase(filter.value));\n  },\n  endsWith: function endsWith(value, filter) {\n    return toLowerCase(value).endsWith(toLowerCase(filter.value));\n  },\n  equal: function equal(value, filter) {\n    return String(value) === String(filter.value);\n  },\n  notEqual: function notEqual(value, filter) {\n    return String(value) !== String(filter.value);\n  },\n  greaterThan: function greaterThan(value, filter) {\n    return value > filter.value;\n  },\n  greaterThanOrEqual: function greaterThanOrEqual(value, filter) {\n    return value >= filter.value;\n  },\n  lessThan: function lessThan(value, filter) {\n    return value < filter.value;\n  },\n  lessThanOrEqual: function lessThanOrEqual(value, filter) {\n    return value <= filter.value;\n  }\n};\n\nvar defaultFilterPredicate = function defaultFilterPredicate(value, filter) {\n  var operation = filter.operation || 'contains';\n  return operationPredicates[operation](value, filter);\n};\n\nvar filterTree = function filterTree(tree, predicate) {\n  return tree.reduce(function (acc, node) {\n    if (node[NODE_CHECK]) {\n      var filteredChildren = filterTree(node.children, predicate);\n\n      if (filteredChildren.length > 0) {\n        acc.push(_assign({}, node, {\n          children: filteredChildren\n        }));\n        return acc;\n      }\n\n      if (predicate(node.root, true)) {\n        acc.push(node.root);\n        return acc;\n      }\n\n      return acc;\n    }\n\n    if (predicate(node)) {\n      acc.push(node);\n      return acc;\n    }\n\n    return acc;\n  }, []);\n};\n\nvar filterHierarchicalRows = function filterHierarchicalRows(rows, predicate, getRowLevelKey, getCollapsedRows) {\n  var tree = rowsToTree(rows, getRowLevelKey);\n  var collapsedRowsMeta = [];\n  var filteredTree = filterTree(tree, function (row, isNode) {\n    if (isNode) {\n      var collapsedRows = getCollapsedRows && getCollapsedRows(row);\n\n      if (collapsedRows && collapsedRows.length) {\n        var filteredCollapsedRows = collapsedRows.filter(predicate);\n        collapsedRowsMeta.push([row, filteredCollapsedRows]);\n        return !!filteredCollapsedRows.length || predicate(row);\n      }\n\n      if (predicate(row)) {\n        collapsedRowsMeta.push([row, []]);\n        return true;\n      }\n\n      return false;\n    }\n\n    return predicate(row);\n  });\n  return {\n    rows: treeToRows(filteredTree),\n    collapsedRowsMeta: new Map(collapsedRowsMeta)\n  };\n};\n\nvar buildPredicate = function buildPredicate(initialFilterExpression, getCellValue, getColumnPredicate) {\n  var getSimplePredicate = function getSimplePredicate(filter) {\n    var columnName = filter.columnName;\n    var customPredicate = getColumnPredicate && getColumnPredicate(columnName);\n    var predicate = customPredicate || defaultFilterPredicate;\n    return function (row) {\n      return predicate(getCellValue(row, columnName), filter, row);\n    };\n  };\n\n  var getOperatorPredicate = function getOperatorPredicate(filterExpression) {\n    var build = operators[toLowerCase(filterExpression.operator)];\n    return build && build(filterExpression.filters.map(getPredicate));\n  };\n\n  var getPredicate = function getPredicate(filterExpression) {\n    return getOperatorPredicate(filterExpression) || getSimplePredicate(filterExpression);\n  };\n\n  return getPredicate(initialFilterExpression);\n};\n\nvar filteredRows = function filteredRows(rows, filterExpression, getCellValue, getColumnPredicate, getRowLevelKey, getCollapsedRows) {\n  if (!(filterExpression && Object.keys(filterExpression).length && rows.length)) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return {\n      rows: rows\n    };\n  }\n\n  var predicate = buildPredicate(filterExpression, getCellValue, getColumnPredicate);\n  return getRowLevelKey ? filterHierarchicalRows(rows, predicate, getRowLevelKey, getCollapsedRows) : {\n    rows: rows.filter(predicate)\n  };\n};\n\nvar filteredCollapsedRowsGetter = function filteredCollapsedRowsGetter(_a) {\n  var collapsedRowsMeta = _a.collapsedRowsMeta;\n  return function (row) {\n    return collapsedRowsMeta && collapsedRowsMeta.get(row);\n  };\n};\n\nvar unwrappedFilteredRows = function unwrappedFilteredRows(_a) {\n  var rows = _a.rows;\n  return rows;\n};\n\nvar GROUP_KEY_SEPARATOR = '|';\n\nvar applyColumnGrouping = function applyColumnGrouping(grouping, _a) {\n  var columnName = _a.columnName,\n      groupIndex = _a.groupIndex;\n  var nextGrouping = grouping;\n  var groupingIndex = nextGrouping.findIndex(function (g) {\n    return g.columnName === columnName;\n  });\n  var targetIndex = groupIndex;\n\n  if (groupingIndex > -1) {\n    nextGrouping = slice(grouping);\n    nextGrouping.splice(groupingIndex, 1);\n  } else if (groupIndex === undefined) {\n    targetIndex = nextGrouping.length;\n  }\n\n  if (targetIndex > -1) {\n    nextGrouping = slice(nextGrouping);\n    nextGrouping.splice(targetIndex, 0, {\n      columnName: columnName\n    });\n  }\n\n  return nextGrouping;\n};\n\nvar changeColumnGrouping = function changeColumnGrouping(_a, _b) {\n  var grouping = _a.grouping,\n      expandedGroups = _a.expandedGroups;\n  var columnName = _b.columnName,\n      groupIndex = _b.groupIndex;\n  var nextGrouping = applyColumnGrouping(grouping, {\n    columnName: columnName,\n    groupIndex: groupIndex\n  });\n  var ungroupedColumnIndex = grouping.findIndex(function (group, index) {\n    return !nextGrouping[index] || group.columnName !== nextGrouping[index].columnName;\n  });\n\n  if (ungroupedColumnIndex === -1) {\n    return {\n      grouping: nextGrouping\n    };\n  }\n\n  var filteredExpandedGroups = expandedGroups.filter(function (group) {\n    return group.split(GROUP_KEY_SEPARATOR).length <= ungroupedColumnIndex;\n  });\n\n  if (filteredExpandedGroups.length === expandedGroups.length) {\n    return {\n      grouping: nextGrouping\n    };\n  }\n\n  return {\n    grouping: nextGrouping,\n    expandedGroups: filteredExpandedGroups\n  };\n};\n\nvar toggleExpandedGroups = function toggleExpandedGroups(state, _a) {\n  var groupKey = _a.groupKey;\n  var expandedGroups = slice(state.expandedGroups);\n  var groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return {\n    expandedGroups: expandedGroups\n  };\n};\n\nvar draftColumnGrouping = function draftColumnGrouping(_a, _b) {\n  var grouping = _a.grouping,\n      draftGrouping = _a.draftGrouping;\n  var columnName = _b.columnName,\n      groupIndex = _b.groupIndex;\n  return {\n    draftGrouping: applyColumnGrouping(draftGrouping || grouping, {\n      columnName: columnName,\n      groupIndex: groupIndex\n    })\n  };\n};\n\nvar cancelColumnGroupingDraft = function cancelColumnGroupingDraft() {\n  return {\n    draftGrouping: null\n  };\n};\n\nvar adjustSortIndex = function adjustSortIndex(groupingIndex, grouping, sorting) {\n  return Math.max(grouping.slice(0, groupingIndex).reduce(function (acc, columnGrouping) {\n    var columnSortingIndex = sorting.findIndex(function (columnSorting) {\n      return columnSorting.columnName === columnGrouping.columnName;\n    });\n    return columnSortingIndex === -1 ? acc - 1 : acc;\n  }, groupingIndex), 0);\n};\n\nvar groupRowChecker = function groupRowChecker(row) {\n  return row[GRID_GROUP_CHECK];\n};\n\nvar groupRowLevelKeyGetter = function groupRowLevelKeyGetter(row) {\n  return row ? row[GRID_GROUP_LEVEL_KEY] : undefined;\n};\n\nvar defaultColumnCriteria = function defaultColumnCriteria(value) {\n  return {\n    value: value,\n    key: String(value)\n  };\n};\n\nvar groupedRows = function groupedRows(rows, grouping, getCellValue, getColumnCriteria, keyPrefix) {\n  if (keyPrefix === void 0) {\n    keyPrefix = '';\n  }\n\n  if (!grouping.length) return rows;\n  var columnName = grouping[0].columnName;\n  var groupCriteria = getColumnCriteria && getColumnCriteria(columnName) || defaultColumnCriteria;\n  var groups = new Map();\n  rows.forEach(function (row) {\n    var rawValue = getCellValue(row, columnName);\n\n    var _a = groupCriteria(rawValue, row),\n        key = _a.key,\n        value = _a.value;\n\n    var sameKeyItems = groups.get(key);\n\n    if (!sameKeyItems) {\n      var groupingValue = value === rawValue ? value : value || key;\n      groups.set(key, [groupingValue, key, [row]]);\n    } else {\n      sameKeyItems[2].push(row);\n    }\n  });\n  var groupedBy = grouping[0].columnName;\n  var nestedGrouping = grouping.slice(1);\n  return __spread(groups.values()).reduce(function (acc, _a) {\n    var _b = __read(_a, 3),\n        value = _b[0],\n        key = _b[1],\n        items = _b[2];\n\n    var _c;\n\n    var compoundKey = \"\" + keyPrefix + key;\n    acc.push((_c = {\n      groupedBy: groupedBy,\n      compoundKey: compoundKey,\n      key: key,\n      value: value\n    }, _c[GRID_GROUP_CHECK] = true, _c[GRID_GROUP_LEVEL_KEY] = GRID_GROUP_TYPE.toString() + \"_\" + groupedBy, _c));\n    acc.push.apply(acc, __spread(groupedRows(items, nestedGrouping, getCellValue, getColumnCriteria, \"\" + compoundKey + GROUP_KEY_SEPARATOR)));\n    return acc;\n  }, []);\n};\n\nvar expandedGroupRows = function expandedGroupRows(rows, grouping, expandedGroups) {\n  if (!grouping.length) return rows;\n  var groupingColumnNames = grouping.map(function (columnGrouping) {\n    return columnGrouping.columnName;\n  });\n  var expandedGroupsSet = new Set(expandedGroups);\n  var currentGroupExpanded = true;\n  var currentGroupLevel = 0;\n  return rows.reduce(function (acc, row) {\n    var _a;\n\n    if (!row[GRID_GROUP_CHECK]) {\n      if (currentGroupExpanded) {\n        acc.push(row);\n      } else {\n        acc[acc.length - 1][GRID_GROUP_COLLAPSED_ROWS].push(row);\n      }\n\n      return acc;\n    }\n\n    var groupLevel = groupingColumnNames.indexOf(row.groupedBy);\n\n    if (groupLevel > currentGroupLevel && !currentGroupExpanded) {\n      return acc;\n    }\n\n    currentGroupExpanded = expandedGroupsSet.has(row.compoundKey);\n    currentGroupLevel = groupLevel;\n\n    if (currentGroupExpanded) {\n      acc.push(row);\n    } else {\n      acc.push(_assign({}, row, (_a = {}, _a[GRID_GROUP_COLLAPSED_ROWS] = [], _a)));\n    }\n\n    return acc;\n  }, []);\n};\n\nvar groupCollapsedRowsGetter = function groupCollapsedRowsGetter(getCollapsedRows) {\n  return function (row) {\n    return row[GRID_GROUP_COLLAPSED_ROWS] || getCollapsedRows && getCollapsedRows(row);\n  };\n};\n\nvar customGroupedRows = function customGroupedRows(currentRows, grouping, getChildGroups, rootRows, keyPrefix) {\n  if (rootRows === void 0) {\n    rootRows = currentRows;\n  }\n\n  if (keyPrefix === void 0) {\n    keyPrefix = '';\n  }\n\n  if (!currentRows || !currentRows.length) return [];\n  if (!grouping.length) return currentRows;\n  var groupedBy = grouping[0].columnName;\n  var nestedGrouping = grouping.slice(1);\n  return getChildGroups(currentRows, grouping[0], rootRows).reduce(function (acc, _a) {\n    var key = _a.key,\n        _b = _a.value,\n        value = _b === void 0 ? key : _b,\n        childRows = _a.childRows;\n\n    var _c;\n\n    var compoundKey = \"\" + keyPrefix + key;\n    acc.push((_c = {\n      groupedBy: groupedBy,\n      compoundKey: compoundKey,\n      key: key,\n      value: value\n    }, _c[GRID_GROUP_CHECK] = true, _c[GRID_GROUP_LEVEL_KEY] = GRID_GROUP_TYPE.toString() + \"_\" + groupedBy, _c));\n    acc.push.apply(acc, __spread(customGroupedRows(childRows, nestedGrouping, getChildGroups, rootRows, \"\" + compoundKey + GROUP_KEY_SEPARATOR)));\n    return acc;\n  }, []);\n};\n\nvar customGroupingRowIdGetter = function customGroupingRowIdGetter(getRowId, rows) {\n  var firstRow = rows.find(function (row) {\n    return !row[GRID_GROUP_CHECK];\n  });\n\n  if (!firstRow || getRowId(firstRow) !== undefined) {\n    return getRowId;\n  }\n\n  var map = new Map(rows.filter(function (row) {\n    return !row[GRID_GROUP_CHECK];\n  }).map(function (row, rowIndex) {\n    return [row, rowIndex];\n  }));\n  return function (row) {\n    return map.get(row);\n  };\n};\n\nvar groupingPanelItems = function groupingPanelItems(columns, grouping, draftGrouping) {\n  var items = draftGrouping.map(function (_a) {\n    var columnName = _a.columnName;\n    return {\n      column: columns.find(function (c) {\n        return c.name === columnName;\n      }),\n      draft: !grouping.some(function (columnGrouping) {\n        return columnGrouping.columnName === columnName;\n      })\n    };\n  });\n  grouping.forEach(function (_a, index) {\n    var columnName = _a.columnName;\n    if (draftGrouping.some(function (columnGrouping) {\n      return columnGrouping.columnName === columnName;\n    })) return;\n    items.splice(index, 0, {\n      column: columns.find(function (c) {\n        return c.name === columnName;\n      }),\n      draft: true\n    });\n  });\n  return items;\n};\n\nvar setCurrentPage = function setCurrentPage(prevPage, page) {\n  return page;\n};\n\nvar setPageSize = function setPageSize(prevPageSize, size) {\n  return size;\n};\n\nvar clamp = function clamp(value, max) {\n  return Math.max(Math.min(value, max), 0);\n}; // tslint:disable-next-line:max-line-length\n\n\nvar PAGE_HEADERS_OVERFLOW_ERROR = 'Max row level exceeds the page size. Consider increasing the page size.';\n\nvar paginatedRows = function paginatedRows(rows, pageSize, page) {\n  return pageSize ? rows.slice(pageSize * page, pageSize * (page + 1)) : rows;\n};\n\nvar rowsWithPageHeaders = function rowsWithPageHeaders(rows, pageSize, getRowLevelKey) {\n  if (!pageSize || !getRowLevelKey) return rows;\n  var result = rows.slice();\n  var headerRows = [];\n  var currentIndex = 0;\n\n  var _loop_1 = function _loop_1() {\n    var row = result[currentIndex];\n    var levelKey = getRowLevelKey(row);\n\n    if (levelKey) {\n      var headerIndex = headerRows.findIndex(function (headerRow) {\n        return getRowLevelKey(headerRow) === levelKey;\n      }); // tslint:disable-next-line:prefer-conditional-expression\n\n      if (headerIndex === -1) {\n        headerRows = __spread(headerRows, [row]);\n      } else {\n        headerRows = __spread(headerRows.slice(0, headerIndex), [row]);\n      }\n\n      if (headerRows.length >= pageSize) {\n        throw new Error(PAGE_HEADERS_OVERFLOW_ERROR);\n      }\n    }\n\n    var indexInPage = currentIndex % pageSize;\n\n    if (indexInPage < headerRows.length && row !== headerRows[indexInPage]) {\n      result = __spread(result.slice(0, currentIndex), [headerRows[indexInPage]], result.slice(currentIndex));\n    }\n\n    currentIndex += 1;\n  };\n\n  while (result.length > currentIndex) {\n    _loop_1();\n  }\n\n  return result;\n};\n\nvar rowCount = function rowCount(rows) {\n  return rows.length;\n};\n\nvar pageCount = function pageCount(count, pageSize) {\n  return pageSize ? Math.ceil(count / pageSize) : 1;\n};\n\nvar currentPage = function currentPage(page, totalCount, pageSize, setCurrentPage) {\n  var totalPages = pageCount(totalCount, pageSize);\n  var adjustedCurrentPage = clamp(page, totalPages - 1);\n\n  if (page !== adjustedCurrentPage) {\n    setTimeout(function () {\n      return setCurrentPage(adjustedCurrentPage);\n    });\n  }\n\n  return adjustedCurrentPage;\n};\n\nvar firstRowOnPage = function firstRowOnPage(currentPage, pageSize, totalCount) {\n  if (totalCount === 0) {\n    return 0;\n  }\n\n  return pageSize ? currentPage * pageSize + 1 : 1;\n};\n\nvar lastRowOnPage = function lastRowOnPage(currentPage, pageSize, totalRowCount) {\n  var result = totalRowCount;\n\n  if (pageSize) {\n    var index = (currentPage + 1) * pageSize;\n    result = index > totalRowCount ? totalRowCount : index;\n  }\n\n  return result;\n};\n\nvar calculateStartPage = function calculateStartPage(currentPage, maxButtonCount, totalPageCount) {\n  return Math.max(Math.min(currentPage - Math.floor(maxButtonCount / 2), totalPageCount - maxButtonCount + 1), 1);\n};\n\nvar toggle = function toggle(source, items, state) {\n  var itemsSet = new Set(items);\n  var sourceState = state;\n\n  if (sourceState === undefined) {\n    var availableSelection = source.filter(function (item) {\n      return itemsSet.has(item);\n    });\n    sourceState = availableSelection.length !== itemsSet.size;\n  }\n\n  if (sourceState) {\n    var sourceSet_1 = new Set(source);\n    return __spread(source, items.filter(function (item) {\n      return !sourceSet_1.has(item);\n    }));\n  }\n\n  return source.filter(function (item) {\n    return !itemsSet.has(item);\n  });\n};\n\nvar toggleSelection = function toggleSelection(selection, _a) {\n  var rowIds = _a.rowIds,\n      state = _a.state;\n  return toggle(selection, rowIds, state);\n};\n\nvar rowsWithAvailableToSelect = function rowsWithAvailableToSelect(rows, getRowId, isGroupRow) {\n  var dataRows = rows;\n\n  if (isGroupRow) {\n    dataRows = dataRows.filter(function (row) {\n      return !isGroupRow(row);\n    });\n  }\n\n  return {\n    rows: rows,\n    availableToSelect: dataRows.map(function (row) {\n      return getRowId(row);\n    })\n  };\n};\n\nvar someSelected = function someSelected(_a, selection) {\n  var availableToSelect = _a.availableToSelect;\n  var selectionSet = new Set(selection);\n  return availableToSelect.length !== 0 && selectionSet.size !== 0 && availableToSelect.some(function (elem) {\n    return selectionSet.has(elem);\n  }) && availableToSelect.some(function (elem) {\n    return !selectionSet.has(elem);\n  });\n};\n\nvar allSelected = function allSelected(_a, selection) {\n  var availableToSelect = _a.availableToSelect;\n  var selectionSet = new Set(selection);\n  return selectionSet.size !== 0 && availableToSelect.length !== 0 && !availableToSelect.some(function (elem) {\n    return !selectionSet.has(elem);\n  });\n};\n\nvar unwrapSelectedRows = function unwrapSelectedRows(_a) {\n  var rows = _a.rows;\n  return rows;\n};\n\nvar startEditRows = function startEditRows(prevEditingRowIds, _a) {\n  var rowIds = _a.rowIds;\n  return __spread(prevEditingRowIds, rowIds);\n};\n\nvar stopEditRows = function stopEditRows(prevEditingRowIds, _a) {\n  var rowIds = _a.rowIds;\n  var rowIdSet = new Set(rowIds);\n  return prevEditingRowIds.filter(function (id) {\n    return !rowIdSet.has(id);\n  });\n};\n\nvar addRow = function addRow(addedRows, _a) {\n  var row = (_a === void 0 ? {\n    row: {}\n  } : _a).row;\n  return __spread(addedRows, [row]);\n};\n\nvar changeAddedRow = function changeAddedRow(addedRows, _a) {\n  var rowId = _a.rowId,\n      change = _a.change;\n  var result = addedRows.slice();\n  result[rowId] = _assign({}, result[rowId], change);\n  return result;\n};\n\nvar cancelAddedRows = function cancelAddedRows(addedRows, _a) {\n  var rowIds = _a.rowIds;\n  var result = [];\n  var indexSet = new Set(rowIds);\n  addedRows.forEach(function (row, index) {\n    if (!indexSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nvar changeRow = function changeRow(prevRowChanges, _a) {\n  var rowId = _a.rowId,\n      change = _a.change;\n\n  var _b;\n\n  var prevChange = prevRowChanges[rowId] || {};\n  return _assign({}, prevRowChanges, (_b = {}, _b[rowId] = _assign({}, prevChange, change), _b));\n};\n\nvar cancelChanges = function cancelChanges(prevRowChanges, _a) {\n  var rowIds = _a.rowIds;\n\n  var result = _assign({}, prevRowChanges);\n\n  rowIds.forEach(function (rowId) {\n    delete result[rowId];\n  });\n  return result;\n};\n\nvar deleteRows = function deleteRows(deletedRowIds, _a) {\n  var rowIds = _a.rowIds;\n  return __spread(deletedRowIds, rowIds);\n};\n\nvar cancelDeletedRows = function cancelDeletedRows(deletedRowIds, _a) {\n  var rowIds = _a.rowIds;\n  var rowIdSet = new Set(rowIds);\n  return deletedRowIds.filter(function (rowId) {\n    return !rowIdSet.has(rowId);\n  });\n};\n\nvar changedRowsByIds = function changedRowsByIds(changes, rowIds) {\n  var result = {};\n  rowIds.forEach(function (rowId) {\n    result[rowId] = changes[rowId];\n  });\n  return result;\n};\n\nvar addedRowsByIds = function addedRowsByIds(addedRows, rowIds) {\n  var rowIdSet = new Set(rowIds);\n  var result = [];\n  addedRows.forEach(function (row, index) {\n    if (rowIdSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nvar defaultCreateRowChange = function defaultCreateRowChange(row, value, columnName) {\n  var _a;\n\n  return _a = {}, _a[columnName] = value, _a;\n};\n\nvar createRowChangeGetter = function createRowChangeGetter(createRowChange, columnExtensions) {\n  if (createRowChange === void 0) {\n    createRowChange = defaultCreateRowChange;\n  }\n\n  if (columnExtensions === void 0) {\n    columnExtensions = [];\n  }\n\n  var map = columnExtensions.reduce(function (acc, columnExtension) {\n    if (columnExtension.createRowChange) {\n      acc[columnExtension.columnName] = columnExtension.createRowChange;\n    }\n\n    return acc;\n  }, {});\n  return function (row, value, columnName) {\n    if (map[columnName]) {\n      return map[columnName](row, value, columnName);\n    }\n\n    return createRowChange(row, value, columnName);\n  };\n};\n\nvar getRowChange = function getRowChange(rowChanges, rowId) {\n  return rowChanges[rowId] || {};\n};\n\nvar TABLE_REORDERING_TYPE = Symbol('reordering');\n\nvar changeColumnOrder = function changeColumnOrder(order, _a) {\n  var sourceColumnName = _a.sourceColumnName,\n      targetColumnName = _a.targetColumnName;\n  var sourceColumnIndex = order.indexOf(sourceColumnName);\n  var targetColumnIndex = order.indexOf(targetColumnName);\n  var newOrder = slice(order);\n  newOrder.splice(sourceColumnIndex, 1);\n  newOrder.splice(targetColumnIndex, 0, sourceColumnName);\n  return newOrder;\n};\n\nvar TABLE_DATA_TYPE = Symbol('data');\nvar TABLE_NODATA_TYPE = Symbol('nodata');\nvar TABLE_FLEX_TYPE = Symbol('flex');\n\nvar orderedColumns = function orderedColumns(tableColumns, order) {\n  return mergeSort(tableColumns, function (a, b) {\n    if (a.type !== TABLE_DATA_TYPE || b.type !== TABLE_DATA_TYPE) return 0;\n    var aPos = order.indexOf(a.column.name);\n    var bPos = order.indexOf(b.column.name);\n    return aPos - bPos;\n  });\n};\n\nvar tableHeaderRowsWithReordering = function tableHeaderRowsWithReordering(tableHeaderRows) {\n  return __spread(tableHeaderRows, [{\n    key: TABLE_REORDERING_TYPE.toString(),\n    type: TABLE_REORDERING_TYPE,\n    height: 0\n  }]);\n};\n\nvar draftOrder = function draftOrder(order, sourceColumnIndex, targetColumnIndex) {\n  if (sourceColumnIndex === -1 || targetColumnIndex === -1 || sourceColumnIndex === targetColumnIndex) {\n    return order;\n  }\n\n  var result = slice(order);\n  var sourceColumn = order[sourceColumnIndex];\n  result.splice(sourceColumnIndex, 1);\n  result.splice(targetColumnIndex, 0, sourceColumn);\n  return result;\n};\n\nvar UNSET_COLUMN_WIDTH_ERROR = ['The \"$1\" column\\'s width is not specified.', 'The TableColumnResizing plugin requires that all columns have the specified width.'].join('\\n');\n\nvar specifyWidths = function specifyWidths(tableColumns, widths, onAbsence) {\n  if (!widths.length) return tableColumns;\n  return tableColumns.reduce(function (acc, tableColumn) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      var columnName_1 = tableColumn.column.name;\n      var column = widths.find(function (el) {\n        return el.columnName === columnName_1;\n      });\n      var width = column && column.width;\n\n      if (width === undefined) {\n        onAbsence(columnName_1);\n        acc.push(tableColumn);\n      } else {\n        acc.push(_assign({}, tableColumn, {\n          width: width\n        }));\n      }\n    } else {\n      acc.push(tableColumn);\n    }\n\n    return acc;\n  }, []);\n};\n\nvar tableColumnsWithWidths = function tableColumnsWithWidths(tableColumns, columnWidths) {\n  return specifyWidths(tableColumns, columnWidths, function (columnName) {\n    throw new Error(UNSET_COLUMN_WIDTH_ERROR.replace('$1', columnName));\n  });\n};\n\nvar tableColumnsWithDraftWidths = function tableColumnsWithDraftWidths(tableColumns, draftColumnWidths) {\n  return specifyWidths(tableColumns, draftColumnWidths, function () {});\n};\n\nvar changeTableColumnWidth = function changeTableColumnWidth(state, _a) {\n  var columnName = _a.columnName,\n      shift = _a.shift,\n      minColumnWidth = _a.minColumnWidth;\n  var columnWidths = state.columnWidths;\n  var nextColumnWidth = slice(columnWidths);\n  var index = nextColumnWidth.findIndex(function (elem) {\n    return elem.columnName === columnName;\n  });\n  var updatedColumn = nextColumnWidth[index];\n  var size = Math.max(minColumnWidth, updatedColumn.width + shift);\n  nextColumnWidth.splice(index, 1, {\n    columnName: columnName,\n    width: size\n  });\n  return {\n    columnWidths: nextColumnWidth\n  };\n};\n\nvar draftTableColumnWidth = function draftTableColumnWidth(state, _a) {\n  var columnName = _a.columnName,\n      shift = _a.shift,\n      minColumnWidth = _a.minColumnWidth;\n  var columnWidths = state.columnWidths;\n  var updatedColumn = columnWidths.find(function (elem) {\n    return elem.columnName === columnName;\n  });\n  var size = Math.max(minColumnWidth, updatedColumn.width + shift);\n  return {\n    draftColumnWidths: [{\n      columnName: updatedColumn.columnName,\n      width: size\n    }]\n  };\n};\n\nvar cancelTableColumnWidthDraft = function cancelTableColumnWidthDraft() {\n  return {\n    draftColumnWidths: []\n  };\n};\n\nvar TABLE_EDIT_COMMAND_TYPE = Symbol('editCommand');\nvar TABLE_ADDED_TYPE = Symbol('added');\nvar TABLE_EDIT_TYPE = Symbol('edit');\nvar TABLE_HEADING_TYPE = Symbol('heading');\n\nvar isHeadingEditCommandsTableCell = function isHeadingEditCommandsTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n};\n\nvar isEditCommandsTableCell = function isEditCommandsTableCell(tableRow, tableColumn) {\n  return (tableRow.type === TABLE_DATA_TYPE || tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n};\n\nvar tableColumnsWithEditing = function tableColumnsWithEditing(tableColumns, width) {\n  return __spread([{\n    width: width,\n    key: TABLE_EDIT_COMMAND_TYPE.toString(),\n    type: TABLE_EDIT_COMMAND_TYPE\n  }], tableColumns);\n};\n\nvar isEditTableCell = function isEditTableCell(tableRow, tableColumn) {\n  return (tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isAddedTableRow = function isAddedTableRow(tableRow) {\n  return tableRow.type === TABLE_ADDED_TYPE;\n};\n\nvar isEditTableRow = function isEditTableRow(tableRow) {\n  return tableRow.type === TABLE_EDIT_TYPE;\n};\n\nvar tableRowsWithEditing = function tableRowsWithEditing(tableRows, editingRowIds, addedRows, rowHeight) {\n  var rowIds = new Set(editingRowIds);\n  var editedTableRows = tableRows.map(function (tableRow) {\n    return tableRow.type === TABLE_DATA_TYPE && rowIds.has(tableRow.rowId) ? _assign({}, tableRow, {\n      type: TABLE_EDIT_TYPE,\n      height: rowHeight\n    }) : tableRow;\n  });\n  var addedTableRows = addedRows.map(function (row, rowIndex) {\n    return {\n      row: row,\n      key: TABLE_ADDED_TYPE.toString() + \"_\" + rowIndex,\n      type: TABLE_ADDED_TYPE,\n      rowId: rowIndex,\n      height: rowHeight\n    };\n  });\n  return __spread(slice(addedTableRows).reverse(), editedTableRows);\n};\n\nvar TABLE_FILTER_TYPE = Symbol('filter');\nvar DEFAULT_FILTER_OPERATIONS = ['contains', 'notContains', 'startsWith', 'endsWith', 'equal', 'notEqual'];\n\nvar isFilterTableCell = function isFilterTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_FILTER_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isFilterTableRow = function isFilterTableRow(tableRow) {\n  return tableRow.type === TABLE_FILTER_TYPE;\n};\n\nvar getColumnFilterOperations = function getColumnFilterOperations(getAvailableFilterOperations, columnName) {\n  return getAvailableFilterOperations && getAvailableFilterOperations(columnName) || DEFAULT_FILTER_OPERATIONS;\n};\n\nvar isFilterValueEmpty = function isFilterValueEmpty(value) {\n  return value === undefined || !String(value).length;\n};\n\nvar getSelectedFilterOperation = function getSelectedFilterOperation(filterOperations, columnName, columnFilter, columnFilterOperations) {\n  if (columnFilter && columnFilter.operation) {\n    return columnFilter.operation;\n  }\n\n  if (filterOperations[columnName]) {\n    return filterOperations[columnName];\n  }\n\n  return columnFilterOperations[0];\n};\n\nvar tableHeaderRowsWithFilter = function tableHeaderRowsWithFilter(headerRows, rowHeight) {\n  return __spread(headerRows, [{\n    key: TABLE_FILTER_TYPE.toString(),\n    type: TABLE_FILTER_TYPE,\n    height: rowHeight\n  }]);\n};\n\nvar TABLE_GROUP_TYPE = Symbol('group');\n\nvar isGroupTableCell = function isGroupTableCell(tableRow, tableColumn) {\n  return !!(tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE && tableColumn.column && tableColumn.column.name === tableRow.row.groupedBy);\n};\n\nvar isGroupIndentTableCell = function isGroupIndentTableCell(tableRow, tableColumn, grouping) {\n  if (tableRow.type !== TABLE_GROUP_TYPE || tableColumn.type !== TABLE_GROUP_TYPE) return false;\n  if (tableColumn.column && tableRow.row.groupedBy === tableColumn.column.name) return false;\n  var rowGroupIndex = grouping.findIndex(function (columnGrouping) {\n    return columnGrouping.columnName === tableRow.row.groupedBy;\n  });\n  var columnGroupIndex = grouping.findIndex(function (columnGrouping) {\n    return !!tableColumn.column && columnGrouping.columnName === tableColumn.column.name;\n  });\n  return columnGroupIndex < rowGroupIndex;\n};\n\nvar isGroupTableRow = function isGroupTableRow(tableRow) {\n  return tableRow.type === TABLE_GROUP_TYPE;\n};\n\nvar tableColumnsWithDraftGrouping = function tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped) {\n  return tableColumns.reduce(function (acc, tableColumn) {\n    if (tableColumn.type !== TABLE_DATA_TYPE) {\n      acc.push(tableColumn);\n      return acc;\n    }\n\n    var columnName = tableColumn.column && tableColumn.column.name || '';\n    var columnGroupingExists = grouping.some(function (columnGrouping) {\n      return columnGrouping.columnName === columnName;\n    });\n    var columnDraftGroupingExists = draftGrouping.some(function (columnGrouping) {\n      return columnGrouping.columnName === columnName;\n    });\n\n    if (!columnGroupingExists && !columnDraftGroupingExists || showColumnWhenGrouped(columnName)) {\n      acc.push(tableColumn);\n    } else if (!columnGroupingExists && columnDraftGroupingExists || columnGroupingExists && !columnDraftGroupingExists) {\n      acc.push(_assign({}, tableColumn, {\n        draft: true\n      }));\n    }\n\n    return acc; // tslint:disable-next-line: prefer-array-literal\n  }, []);\n};\n\nvar tableColumnsWithGrouping = function tableColumnsWithGrouping(columns, tableColumns, grouping, draftGrouping, indentColumnWidth, showColumnWhenGrouped) {\n  return __spread(grouping.map(function (columnGrouping) {\n    var groupedColumn = columns.find(function (column) {\n      return column.name === columnGrouping.columnName;\n    });\n    return {\n      key: TABLE_GROUP_TYPE.toString() + \"_\" + groupedColumn.name,\n      type: TABLE_GROUP_TYPE,\n      column: groupedColumn,\n      width: indentColumnWidth\n    };\n  }), tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped));\n};\n\nvar tableRowsWithGrouping = function tableRowsWithGrouping(tableRows, isGroupRow) {\n  return tableRows.map(function (tableRow) {\n    if (tableRow.type !== TABLE_DATA_TYPE || !isGroupRow(tableRow.row)) {\n      return tableRow;\n    }\n\n    return _assign({}, tableRow, {\n      key: TABLE_GROUP_TYPE.toString() + \"_\" + tableRow.row.compoundKey,\n      type: TABLE_GROUP_TYPE\n    });\n  });\n};\n\nvar tableGroupCellColSpanGetter = function tableGroupCellColSpanGetter(getTableCellColSpan) {\n  return function (params) {\n    var tableRow = params.tableRow,\n        tableColumns = params.tableColumns,\n        tableColumn = params.tableColumn;\n\n    if (tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE && tableRow.row.groupedBy === tableColumn.column.name) {\n      return tableColumns.length - tableColumns.indexOf(tableColumn);\n    }\n\n    return getTableCellColSpan(params);\n  };\n};\n\nvar isHeadingTableCell = function isHeadingTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isHeadingTableRow = function isHeadingTableRow(tableRow) {\n  return tableRow.type === TABLE_HEADING_TYPE;\n};\n\nvar findChainByColumnIndex = function findChainByColumnIndex(chains, columnIndex) {\n  return chains.find(function (chain) {\n    return chain.start <= columnIndex && columnIndex < chain.start + chain.columns.length;\n  });\n};\n\nvar splitHeaderColumnChains = function splitHeaderColumnChains(tableColumnChains, tableColumns, shouldSplitChain, extendChainProps) {\n  return tableColumnChains.map(function (row, rowIndex) {\n    return row.reduce(function (acc, chain) {\n      var currentChain = null;\n      chain.columns.forEach(function (col) {\n        var column = tableColumns.find(function (c) {\n          return c.key === col.key;\n        });\n        var isNewGroup = shouldSplitChain(currentChain, column, rowIndex);\n\n        if (isNewGroup) {\n          var start = currentChain ? currentChain.start + currentChain.columns.length : chain.start;\n          acc.push(_assign({}, chain, extendChainProps(column), {\n            start: start,\n            columns: []\n          }));\n          currentChain = acc[acc.length - 1];\n        }\n\n        currentChain.columns.push(column);\n      });\n      return acc;\n    }, []);\n  });\n};\n\nvar generateSimpleChains = function generateSimpleChains(rows, columns) {\n  return rows.map(function () {\n    return [{\n      columns: columns,\n      start: 0\n    }];\n  });\n};\n\nvar tableRowsWithHeading = function tableRowsWithHeading(headerRows) {\n  return __spread([{\n    key: TABLE_HEADING_TYPE.toString(),\n    type: TABLE_HEADING_TYPE\n  }], headerRows);\n};\n\nvar TABLE_BAND_TYPE = Symbol('band');\nvar BAND_GROUP_CELL = 'bandGroupCell';\nvar BAND_HEADER_CELL = 'bandHeaderCell';\nvar BAND_EMPTY_CELL = 'bandEmptyCell';\nvar BAND_DUPLICATE_RENDER = 'bandDuplicateRender';\n\nvar isBandedTableRow = function isBandedTableRow(tableRow) {\n  return tableRow.type === TABLE_BAND_TYPE;\n};\n\nvar isBandedOrHeaderRow = function isBandedOrHeaderRow(tableRow) {\n  return isBandedTableRow(tableRow) || tableRow.type === TABLE_HEADING_TYPE;\n};\n\nvar isNoDataColumn = function isNoDataColumn(columnType) {\n  return columnType !== TABLE_DATA_TYPE;\n};\n\nvar getColumnMeta = function getColumnMeta(columnName, bands, tableRowLevel, level, title, result) {\n  if (level === void 0) {\n    level = 0;\n  }\n\n  if (title === void 0) {\n    title = null;\n  }\n\n  if (result === void 0) {\n    result = null;\n  }\n\n  return bands.reduce(function (acc, column) {\n    if (column.columnName === columnName) {\n      return _assign({}, acc, {\n        title: title,\n        level: level\n      });\n    }\n\n    if (column.children !== undefined) {\n      return getColumnMeta(columnName, column.children, tableRowLevel, level + 1, level > tableRowLevel ? title : column.title, acc);\n    }\n\n    return acc;\n  }, result || {\n    level: level,\n    title: title\n  });\n};\n\nvar getBandComponent = function getBandComponent(_a, tableHeaderRows, tableColumns, columnBands, tableHeaderColumnChains) {\n  var currentTableColumn = _a.tableColumn,\n      tableRow = _a.tableRow,\n      rowSpan = _a.rowSpan;\n  if (rowSpan) return {\n    type: BAND_DUPLICATE_RENDER,\n    payload: null\n  };\n  var maxLevel = tableHeaderRows.filter(function (column) {\n    return column.type === TABLE_BAND_TYPE;\n  }).length + 1;\n  var level = tableRow.level;\n  var currentRowLevel = level === undefined ? maxLevel - 1 : level;\n  var currentColumnMeta = currentTableColumn.type === TABLE_DATA_TYPE ? getColumnMeta(currentTableColumn.column.name, columnBands, currentRowLevel) : {\n    level: 0,\n    title: ''\n  };\n  if (currentColumnMeta.level < currentRowLevel) return {\n    type: BAND_EMPTY_CELL,\n    payload: null\n  };\n  var currentColumnIndex = tableColumns.findIndex(function (column) {\n    return column.key === currentTableColumn.key;\n  });\n  var previousTableColumn = tableColumns[currentColumnIndex - 1];\n  var beforeBorder = false;\n\n  if (currentColumnIndex > 0 && currentTableColumn.type === TABLE_DATA_TYPE && isNoDataColumn(previousTableColumn.type)) {\n    beforeBorder = true;\n  }\n\n  if (currentColumnMeta.level === currentRowLevel) {\n    return {\n      type: BAND_HEADER_CELL,\n      payload: _assign({\n        tableRow: tableHeaderRows.find(function (row) {\n          return row.type === TABLE_HEADING_TYPE;\n        }),\n        rowSpan: maxLevel - currentRowLevel\n      }, beforeBorder && {\n        beforeBorder: beforeBorder\n      })\n    };\n  }\n\n  var currentColumnChain = findChainByColumnIndex(tableHeaderColumnChains[currentRowLevel], currentColumnIndex);\n\n  if (currentColumnChain.start < currentColumnIndex) {\n    return {\n      type: null,\n      payload: null\n    };\n  }\n\n  return {\n    type: BAND_GROUP_CELL,\n    payload: _assign({\n      colSpan: currentColumnChain.columns.length,\n      value: currentColumnMeta.title,\n      column: currentColumnMeta\n    }, beforeBorder && {\n      beforeBorder: beforeBorder\n    })\n  };\n};\n\nvar tableRowsWithBands = function tableRowsWithBands(tableHeaderRows, columnBands, tableColumns) {\n  var tableDataColumns = tableColumns.filter(function (column) {\n    return column.type === TABLE_DATA_TYPE;\n  });\n\n  var getMaxNestedLevel = function getMaxNestedLevel(bands, level, result) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    if (result === void 0) {\n      result = null;\n    }\n\n    return bands.reduce(function (acc, column) {\n      if (column.children !== undefined) {\n        return getMaxNestedLevel(column.children, level + 1, acc);\n      }\n\n      var isDataColumn = tableDataColumns.findIndex(function (dataColumn) {\n        return !!dataColumn.column && dataColumn.column.name === column.columnName;\n      }) > -1;\n\n      if (level > acc.level && isDataColumn) {\n        return _assign({}, acc, {\n          level: level\n        });\n      }\n\n      return acc;\n    }, result || {\n      level: 0\n    });\n  };\n\n  var tableBandHeaders = Array.from({\n    length: getMaxNestedLevel(columnBands, 0).level\n  }).map(function (row, index) {\n    return {\n      key: TABLE_BAND_TYPE.toString() + \"_\" + index,\n      type: TABLE_BAND_TYPE,\n      level: index\n    };\n  });\n  return __spread(tableBandHeaders, tableHeaderRows);\n};\n\nvar tableHeaderColumnChainsWithBands = function tableHeaderColumnChainsWithBands(tableHeaderRows, tableColumns, bands) {\n  var chains = generateSimpleChains(tableHeaderRows, tableColumns);\n  var maxBandRowIndex = tableHeaderRows.filter(function (row) {\n    return row.type === TABLE_BAND_TYPE;\n  }).length;\n  var rawBandChains = chains.slice(0, maxBandRowIndex);\n  var currentBand = null;\n\n  var shouldSplitChain = function shouldSplitChain(chain, column, rowIndex) {\n    if (rowIndex > maxBandRowIndex) return false;\n    var columnName = column.column && column.column.name || '';\n    currentBand = getColumnMeta(columnName, bands, rowIndex);\n    return !chain || chain.bandTitle !== currentBand.title;\n  };\n\n  var extendChainProps = function extendChainProps() {\n    return {\n      bandTitle: (currentBand || {}).title\n    };\n  };\n\n  var bandChains = splitHeaderColumnChains(rawBandChains, tableColumns, shouldSplitChain, extendChainProps);\n  return __spread(bandChains, chains.slice(maxBandRowIndex));\n};\n\nvar toggleDetailRowExpanded = function toggleDetailRowExpanded(prevExpanded, _a) {\n  var rowId = _a.rowId,\n      state = _a.state;\n  return toggle(prevExpanded, [rowId], state);\n};\n\nvar TABLE_DETAIL_TYPE = Symbol('detail');\n\nvar isDetailRowExpanded = function isDetailRowExpanded(expandedDetailRowIds, rowId) {\n  return expandedDetailRowIds.indexOf(rowId) > -1;\n};\n\nvar isDetailToggleTableCell = function isDetailToggleTableCell(tableRow, tableColumn) {\n  return tableColumn.type === TABLE_DETAIL_TYPE && tableRow.type === TABLE_DATA_TYPE;\n};\n\nvar isDetailTableRow = function isDetailTableRow(tableRow) {\n  return tableRow.type === TABLE_DETAIL_TYPE;\n};\n\nvar isDetailTableCell = function isDetailTableCell(tableColumn, tableColumns) {\n  return tableColumns.indexOf(tableColumn) === 0;\n};\n\nvar tableRowsWithExpandedDetail = function tableRowsWithExpandedDetail(tableRows, expandedDetailRowIds, rowHeight) {\n  var result = tableRows;\n  expandedDetailRowIds.forEach(function (expandedRowId) {\n    var rowIndex = result.findIndex(function (tableRow) {\n      return tableRow.type === TABLE_DATA_TYPE && tableRow.rowId === expandedRowId;\n    });\n    if (rowIndex === -1) return;\n    var insertIndex = rowIndex + 1;\n    var _a = result[rowIndex],\n        row = _a.row,\n        rowId = _a.rowId;\n    result = __spread(result.slice(0, insertIndex), [{\n      rowId: rowId,\n      row: row,\n      key: TABLE_DETAIL_TYPE.toString() + \"_\" + rowId,\n      type: TABLE_DETAIL_TYPE,\n      height: rowHeight\n    }], result.slice(insertIndex));\n  });\n  return result;\n};\n\nvar tableColumnsWithDetail = function tableColumnsWithDetail(tableColumns, toggleColumnWidth) {\n  return __spread([{\n    key: TABLE_DETAIL_TYPE.toString(),\n    type: TABLE_DETAIL_TYPE,\n    width: toggleColumnWidth\n  }], tableColumns);\n};\n\nvar tableDetailCellColSpanGetter = function tableDetailCellColSpanGetter(getTableCellColSpan) {\n  return function (params) {\n    var tableRow = params.tableRow,\n        tableColumns = params.tableColumns,\n        tableColumn = params.tableColumn;\n\n    if (tableRow.type === TABLE_DETAIL_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n      return tableColumns.length;\n    }\n\n    return getTableCellColSpan(params);\n  };\n};\n\nvar TABLE_SELECT_TYPE = Symbol('select');\n\nvar isSelectTableCell = function isSelectTableCell(tableRow, tableColumn) {\n  return tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_DATA_TYPE;\n};\n\nvar isSelectAllTableCell = function isSelectAllTableCell(tableRow, tableColumn) {\n  return tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_HEADING_TYPE;\n};\n\nvar tableColumnsWithSelection = function tableColumnsWithSelection(tableColumns, selectionColumnWidth) {\n  return __spread([{\n    key: TABLE_SELECT_TYPE.toString(),\n    type: TABLE_SELECT_TYPE,\n    width: selectionColumnWidth\n  }], tableColumns);\n};\n\nvar isDataTableCell = function isDataTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isHeaderStubTableCell = function isHeaderStubTableCell(tableRow, headerRows) {\n  return headerRows.indexOf(tableRow) > -1;\n};\n\nvar isDataTableRow = function isDataTableRow(tableRow) {\n  return tableRow.type === TABLE_DATA_TYPE;\n};\n\nvar isNoDataTableRow = function isNoDataTableRow(tableRow) {\n  return tableRow.type === TABLE_NODATA_TYPE;\n};\n\nvar isNoDataTableCell = function isNoDataTableCell(tableColumn, tableColumns) {\n  return tableColumns.indexOf(tableColumn) === 0;\n};\n\nvar getColumnExtension = function getColumnExtension(columnExtensions, columnName) {\n  if (!columnExtensions) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return {};\n  }\n\n  var columnExtension = columnExtensions.find(function (extension) {\n    return extension.columnName === columnName;\n  });\n\n  if (!columnExtension) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return {};\n  }\n\n  return columnExtension;\n};\n\nvar getColumnExtensionValueGetter = function getColumnExtensionValueGetter(columnExtensions, extensionName, defaultValue) {\n  return function (columnName) {\n    if (columnExtensions) {\n      var columnExtension = getColumnExtension(columnExtensions, columnName);\n      var extensionValue = columnExtension[extensionName];\n      return extensionValue !== undefined ? extensionValue : defaultValue;\n    }\n\n    return defaultValue;\n  };\n};\n\nvar tableColumnsWithDataRows = function tableColumnsWithDataRows(columns, columnExtensions) {\n  return columns.map(function (column) {\n    var name = column.name;\n    var columnExtension = getColumnExtension(columnExtensions, name);\n    return {\n      column: column,\n      key: TABLE_DATA_TYPE.toString() + \"_\" + name,\n      type: TABLE_DATA_TYPE,\n      width: columnExtension.width,\n      align: columnExtension.align,\n      wordWrapEnabled: columnExtension.wordWrapEnabled\n    };\n  });\n};\n\nvar tableRowsWithDataRows = function tableRowsWithDataRows(rows, getRowId) {\n  return !rows.length ? [{\n    key: TABLE_NODATA_TYPE.toString(),\n    type: TABLE_NODATA_TYPE\n  }] : rows.map(function (row) {\n    var rowId = getRowId(row);\n    return {\n      row: row,\n      rowId: rowId,\n      type: TABLE_DATA_TYPE,\n      key: TABLE_DATA_TYPE.toString() + \"_\" + rowId\n    };\n  });\n};\n\nvar tableCellColSpanGetter = function tableCellColSpanGetter(params) {\n  var tableRow = params.tableRow,\n      tableColumns = params.tableColumns,\n      tableColumn = params.tableColumn;\n\n  if (tableRow.type === TABLE_NODATA_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n\n  return 1;\n};\n\nvar visibleTableColumns = function visibleTableColumns(tableColumns, hiddenColumnNames) {\n  return tableColumns.filter(function (tableColumn) {\n    return tableColumn.type !== TABLE_DATA_TYPE || hiddenColumnNames.indexOf(tableColumn.column.name) === -1;\n  });\n};\n\nvar tableDataColumnsExist = function tableDataColumnsExist(tableColumns) {\n  return tableColumns.some(function (column) {\n    return column.type === TABLE_DATA_TYPE;\n  });\n};\n\nvar columnChooserItems = function columnChooserItems(columns, hiddenColumnNames) {\n  return columns.map(function (column) {\n    return {\n      column: column,\n      hidden: hiddenColumnNames.indexOf(column.name) !== -1\n    };\n  });\n};\n\nvar toggleColumn = function toggleColumn(hiddenColumnNames, columnName) {\n  return hiddenColumnNames.indexOf(columnName) === -1 ? __spread(hiddenColumnNames, [columnName]) : hiddenColumnNames.filter(function (hiddenColumn) {\n    return hiddenColumn !== columnName;\n  });\n};\n\nvar toggleRowExpanded = function toggleRowExpanded(prevExpanded, _a) {\n  var rowId = _a.rowId,\n      state = _a.state;\n  return toggle(prevExpanded, [rowId], state);\n};\n\nvar GRID_TREE_NODE_TYPE = Symbol('treeNode');\n\nvar customTreeRows = function customTreeRows(currentRow, getChildRows, rootRows, level) {\n  if (level === void 0) {\n    level = 0;\n  }\n\n  var childRows = getChildRows(currentRow, rootRows);\n  if (!childRows) return {\n    rows: [],\n    treeMeta: [],\n    empty: true\n  };\n  return childRows.reduce(function (acc, row) {\n    var _a, _b;\n\n    var nestedResult = customTreeRows(row, getChildRows, rootRows, level + 1);\n\n    (_a = acc.rows).push.apply(_a, __spread([row], nestedResult.rows));\n\n    (_b = acc.treeMeta).push.apply(_b, __spread([[row, {\n      level: level,\n      leaf: !!nestedResult.empty\n    }]], nestedResult.treeMeta));\n\n    return acc;\n  }, {\n    rows: [],\n    treeMeta: []\n  });\n};\n\nvar customTreeRowsWithMeta = function customTreeRowsWithMeta(rows, getChildRows) {\n  var result = customTreeRows(null, getChildRows, rows);\n  return {\n    rows: result.rows,\n    treeMeta: new Map(result.treeMeta)\n  };\n};\n\nvar customTreeRowIdGetter = function customTreeRowIdGetter(getRowId, _a) {\n  var rows = _a.rows,\n      treeMeta = _a.treeMeta;\n  var firstNestedRowIndex = rows.findIndex(function (row) {\n    return treeMeta.get(row).level > 0;\n  });\n\n  if (firstNestedRowIndex === -1 || getRowId(rows[firstNestedRowIndex]) !== undefined) {\n    return getRowId;\n  }\n\n  var map = new Map(rows.map(function (row, rowIndex) {\n    return [row, rowIndex];\n  }));\n  return function (row) {\n    return map.get(row);\n  };\n};\n\nvar customTreeRowLevelKeyGetter = function customTreeRowLevelKeyGetter(getRowLevelKey, _a) {\n  var treeMeta = _a.treeMeta;\n  return function (row) {\n    var rowMeta = treeMeta.get(row);\n\n    if (rowMeta !== undefined) {\n      return GRID_TREE_NODE_TYPE.toString() + \"_\" + rowMeta.level;\n    }\n\n    return getRowLevelKey && getRowLevelKey();\n  };\n};\n\nvar expandedTreeRows = function expandedTreeRows(_a, getRowId, expandedRowIds) {\n  var rows = _a.rows,\n      treeMeta = _a.treeMeta;\n  var expandedRowIdsSet = new Set(expandedRowIds);\n  var currentExpanded = true;\n  var currentLevel = 0;\n  var collapsedRowsMeta = new Map();\n  var resultRows = [];\n  rows.forEach(function (row) {\n    var rowMeta = treeMeta.get(row);\n    var level = rowMeta && rowMeta.level;\n\n    if (level === undefined && currentExpanded) {\n      resultRows.push(row);\n    } else if (!currentExpanded && (level === undefined || level > currentLevel)) {\n      var lastRow = resultRows[resultRows.length - 1];\n      var collapsedItems = collapsedRowsMeta.get(lastRow);\n\n      if (!collapsedItems) {\n        collapsedItems = [];\n        collapsedRowsMeta.set(lastRow, collapsedItems);\n      }\n\n      collapsedItems.push(row);\n    } else {\n      currentExpanded = expandedRowIdsSet.has(getRowId(row));\n      currentLevel = level;\n      resultRows.push(row);\n    }\n  });\n  return {\n    treeMeta: treeMeta,\n    collapsedRowsMeta: collapsedRowsMeta,\n    rows: resultRows\n  };\n};\n\nvar collapsedTreeRowsGetter = function collapsedTreeRowsGetter(getCollapsedRows, _a) {\n  var collapsedRowsMeta = _a.collapsedRowsMeta;\n  return function (row) {\n    return collapsedRowsMeta.get(row) || getCollapsedRows && getCollapsedRows(row);\n  };\n};\n\nvar isTreeRowLeafGetter = function isTreeRowLeafGetter(_a) {\n  var treeMeta = _a.treeMeta;\n  return function (row) {\n    var rowMeta = treeMeta.get(row);\n    return rowMeta && rowMeta.leaf;\n  };\n};\n\nvar getTreeRowLevelGetter = function getTreeRowLevelGetter(_a) {\n  var treeMeta = _a.treeMeta;\n  return function (row) {\n    var rowMeta = treeMeta.get(row);\n    return rowMeta && rowMeta.level;\n  };\n};\n\nvar unwrappedCustomTreeRows = function unwrappedCustomTreeRows(_a) {\n  var rows = _a.rows;\n  return rows;\n};\n\nvar isTreeTableCell = function isTreeTableCell(tableRow, tableColumn, forColumnName) {\n  return tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE && tableColumn.column.name === forColumnName;\n};\n\nvar changeSearchValue = function changeSearchValue(prevSearchValue, searchValue) {\n  return searchValue;\n};\n\nvar searchFilterExpression = function searchFilterExpression(searchValue, columns, filterExpression) {\n  var filters = columns.map(function (_a) {\n    var name = _a.name;\n    return {\n      columnName: name,\n      value: searchValue\n    };\n  });\n  var selfFilterExpression = {\n    filters: filters,\n    operator: 'or'\n  };\n\n  if (!filterExpression) {\n    return selfFilterExpression;\n  }\n\n  return {\n    operator: 'and',\n    filters: [filterExpression, selfFilterExpression]\n  };\n};\n\nvar getAvailableFilterOperationsGetter = function getAvailableFilterOperationsGetter(getAvailableFilterOperations, availableFilterOperations, columnNames) {\n  return function (columnName) {\n    return columnNames.indexOf(columnName) > -1 && availableFilterOperations || // tslint:disable-next-line: max-line-length\n    typeof getAvailableFilterOperations === 'function' && getAvailableFilterOperations(columnName) || undefined;\n  };\n};\n\nvar FIXED_COLUMN_LEFT_SIDE = 'left';\nvar FIXED_COLUMN_RIGHT_SIDE = 'right';\nvar TABLE_FIXED_TYPE = Symbol('fixed');\n\nvar getFixedColumnKeys = function getFixedColumnKeys(tableColumns, fixedNames) {\n  return tableColumns.filter(function (tableColumn) {\n    return tableColumn.type === TABLE_DATA_TYPE && fixedNames.indexOf(tableColumn.column.name) !== -1 || fixedNames.indexOf(tableColumn.type) !== -1;\n  }).map(function (_a) {\n    var key = _a.key;\n    return key;\n  });\n};\n\nvar isFixedTableRow = function isFixedTableRow(tableRow) {\n  return tableRow.type === TABLE_FIXED_TYPE;\n};\n\nvar calculatePosition = function calculatePosition(array, index, tableColumnDimensions) {\n  return index === 0 ? 0 : array.slice(0, index).reduce(function (acc, target) {\n    return acc + tableColumnDimensions[target] || 0;\n  }, 0);\n};\n\nvar calculateFixedColumnProps = function calculateFixedColumnProps(_a, _b, tableColumns, tableColumnDimensions, tableHeaderColumnChains) {\n  var tableColumn = _a.tableColumn;\n  var leftColumns = _b.leftColumns,\n      rightColumns = _b.rightColumns;\n  var side = tableColumn.fixed;\n  var targetArray = side === FIXED_COLUMN_LEFT_SIDE ? getFixedColumnKeys(tableColumns, leftColumns) : slice(getFixedColumnKeys(tableColumns, rightColumns)).reverse();\n  var index = tableColumns.findIndex(function (_a) {\n    var key = _a.key;\n    return key === tableColumn.key;\n  });\n  var fixedIndex = targetArray.indexOf(tableColumn.key);\n  var columnChain = findChainByColumnIndex(tableHeaderColumnChains[0], index);\n  var showLeftDivider = columnChain.start === index && index !== 0;\n  var showRightDivider = columnChain.start + columnChain.columns.length - 1 === index && index < tableColumns.length - 1;\n  var position = calculatePosition(targetArray, fixedIndex, tableColumnDimensions);\n  return {\n    showRightDivider: showRightDivider,\n    showLeftDivider: showLeftDivider,\n    position: position,\n    side: side\n  };\n};\n\nvar tableColumnsWithFixed = function tableColumnsWithFixed(tableColumns, leftColumns, rightColumns) {\n  return tableColumns.map(function (tableColumn) {\n    var fixed;\n\n    if (tableColumn.type === TABLE_DATA_TYPE && leftColumns.indexOf(tableColumn.column.name) !== -1 || leftColumns.indexOf(tableColumn.type) !== -1) {\n      fixed = FIXED_COLUMN_LEFT_SIDE;\n    }\n\n    if (tableColumn.type === TABLE_DATA_TYPE && rightColumns.indexOf(tableColumn.column.name) !== -1 || rightColumns.indexOf(tableColumn.type) !== -1) {\n      fixed = FIXED_COLUMN_RIGHT_SIDE;\n    }\n\n    return fixed ? _assign({}, tableColumn, {\n      fixed: fixed\n    }) : tableColumn;\n  });\n};\n\nvar tableHeaderRowsWithFixed = function tableHeaderRowsWithFixed(tableHeaderRows) {\n  return __spread(tableHeaderRows, [{\n    key: TABLE_FIXED_TYPE.toString(),\n    type: TABLE_FIXED_TYPE,\n    height: 0\n  }]);\n};\n\nvar tableHeaderColumnChainsWithFixed = function tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns) {\n  var chains = tableHeaderColumnChains || generateSimpleChains(tableHeaderRows, tableColumns);\n\n  var shouldSplitChain = function shouldSplitChain(currentGroup, column) {\n    return !currentGroup || currentGroup.fixed !== column.fixed;\n  };\n\n  var extendChainProps = function extendChainProps(column) {\n    return {\n      fixed: column.fixed\n    };\n  };\n\n  return splitHeaderColumnChains(chains, tableColumns, shouldSplitChain, extendChainProps);\n};\n\nvar defaultSummaryCalculators = {\n  count: function count(rows) {\n    return rows.length;\n  },\n  sum: function sum(rows, getValue) {\n    return rows.reduce(function (acc, row) {\n      return acc + getValue(row);\n    }, 0);\n  },\n  max: function max(rows, getValue) {\n    return rows.length ? rows.reduce(function (acc, row) {\n      return Math.max(acc, getValue(row));\n    }, -Infinity) : null;\n  },\n  min: function min(rows, getValue) {\n    return rows.length ? rows.reduce(function (acc, row) {\n      return Math.min(acc, getValue(row));\n    }, Infinity) : null;\n  },\n  avg: function avg(rows, getValue) {\n    return rows.length ? rows.reduce(function (acc, row) {\n      return acc + getValue(row);\n    }, 0) / rows.length : null;\n  }\n};\n\nvar defaultSummaryCalculator = function defaultSummaryCalculator(type, rows, getValue) {\n  var summaryCalculator = defaultSummaryCalculators[type];\n\n  if (!summaryCalculator) {\n    throw new Error(\"The summary type '\" + type + \"' is not defined\");\n  }\n\n  return summaryCalculator(rows, getValue);\n};\n\nvar rowsSummary = function rowsSummary(rows, summaryItems, getCellValue, calculator) {\n  return summaryItems.reduce(function (acc, _a) {\n    var type = _a.type,\n        columnName = _a.columnName;\n\n    var getValue = function getValue(row) {\n      return getCellValue(row, columnName);\n    };\n\n    acc.push(calculator(type, rows, getValue));\n    return acc;\n  }, []);\n};\n\nvar totalSummaryValues = function totalSummaryValues(rows, summaryItems, getCellValue, getRowLevelKey, isGroupRow, getCollapsedRows, calculator) {\n  if (calculator === void 0) {\n    calculator = defaultSummaryCalculator;\n  }\n\n  var plainRows = rows.reduce(function (acc, row) {\n    if (getRowLevelKey && getRowLevelKey(row)) {\n      if (!isGroupRow || !isGroupRow(row)) {\n        acc.push(row);\n      }\n\n      var collapsedRows = getCollapsedRows && getCollapsedRows(row);\n\n      if (collapsedRows) {\n        acc.push.apply(acc, __spread(collapsedRows));\n      }\n\n      return acc;\n    }\n\n    acc.push(row);\n    return acc;\n  }, []);\n  return rowsSummary(plainRows, summaryItems, getCellValue, calculator);\n};\n\nvar groupSummaryValues = function groupSummaryValues(rows, summaryItems, getCellValue, getRowLevelKey, isGroupRow, calculator) {\n  if (calculator === void 0) {\n    calculator = defaultSummaryCalculator;\n  }\n\n  var levels = [];\n  var summaries = {};\n  rows.forEach(function (row) {\n    var levelKey = getRowLevelKey(row);\n\n    if (!levelKey) {\n      levels.forEach(function (level) {\n        level.rows.push(row);\n      });\n    }\n\n    var levelIndex = levels.findIndex(function (level) {\n      return level.levelKey === levelKey;\n    });\n\n    if (levelIndex > -1) {\n      levels.slice(levelIndex).forEach(function (level) {\n        summaries[level.row.compoundKey] = rowsSummary(level.rows, summaryItems, getCellValue, calculator);\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n\n    if (isGroupRow(row)) {\n      levels.push({\n        levelKey: levelKey,\n        row: row,\n        rows: []\n      });\n    }\n  }, {});\n  levels.forEach(function (level) {\n    summaries[level.row.compoundKey] = rowsSummary(level.rows, summaryItems, getCellValue, calculator);\n  });\n  return summaries;\n};\n\nvar treeSummaryValues = function treeSummaryValues(rows, summaryItems, getCellValue, getRowLevelKey, isGroupRow, getRowId, calculator) {\n  if (calculator === void 0) {\n    calculator = defaultSummaryCalculator;\n  }\n\n  var levels = [];\n  var summaries = {};\n  rows.forEach(function (row) {\n    var levelKey = getRowLevelKey(row);\n\n    if (!levelKey) {\n      levels[levels.length - 1].rows.push(row);\n      return;\n    }\n\n    var levelIndex = levels.findIndex(function (level) {\n      return level.levelKey === levelKey;\n    });\n\n    if (levelIndex > -1) {\n      levels.slice(levelIndex).forEach(function (level) {\n        if (level.rows.length) {\n          summaries[getRowId(level.row)] = rowsSummary(level.rows, summaryItems, getCellValue, calculator);\n        }\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n\n    if (!isGroupRow || !isGroupRow(row)) {\n      if (levels.length) {\n        levels[levels.length - 1].rows.push(row);\n      }\n\n      levels.push({\n        levelKey: levelKey,\n        row: row,\n        rows: []\n      });\n    }\n  }, {});\n  levels.forEach(function (level) {\n    if (level.rows.length) {\n      summaries[getRowId(level.row)] = rowsSummary(level.rows, summaryItems, getCellValue, calculator);\n    }\n  });\n  return summaries;\n};\n\nvar TABLE_TOTAL_SUMMARY_TYPE = Symbol('totalSummary');\nvar TABLE_GROUP_SUMMARY_TYPE = Symbol('groupSummary');\nvar TABLE_TREE_SUMMARY_TYPE = Symbol('treeSummary');\n\nvar tableRowsWithTotalSummaries = function tableRowsWithTotalSummaries(footerRows) {\n  return __spread([{\n    key: TABLE_TOTAL_SUMMARY_TYPE.toString(),\n    type: TABLE_TOTAL_SUMMARY_TYPE\n  }], footerRows);\n};\n\nvar tableRowsWithSummaries = function tableRowsWithSummaries(tableRows, getRowLevelKey, isGroupRow, getRowId) {\n  if (!getRowLevelKey) return tableRows;\n  var result = [];\n\n  var closeLevel = function closeLevel(level) {\n    if (!level.opened) return;\n\n    if (isGroupRow && isGroupRow(level.row)) {\n      var compoundKey = level.row.compoundKey;\n      result.push({\n        key: TABLE_GROUP_SUMMARY_TYPE.toString() + \"_\" + compoundKey,\n        type: TABLE_GROUP_SUMMARY_TYPE,\n        row: level.row\n      });\n    } else {\n      var rowId = getRowId(level.row);\n      result.push({\n        key: TABLE_TREE_SUMMARY_TYPE.toString() + \"_\" + rowId,\n        type: TABLE_TREE_SUMMARY_TYPE,\n        row: level.row\n      });\n    }\n  };\n\n  var levels = [];\n  tableRows.forEach(function (tableRow) {\n    var row = tableRow.row;\n    var levelKey = getRowLevelKey(row);\n\n    if (levelKey) {\n      var levelIndex = levels.findIndex(function (level) {\n        return level.levelKey === levelKey;\n      });\n\n      if (levelIndex > -1) {\n        levels.slice(levelIndex).reverse().forEach(closeLevel);\n        levels = levels.slice(0, levelIndex);\n      }\n\n      if (!isGroupRow || !isGroupRow(row)) {\n        levels = levels.map(function (level) {\n          return _assign({}, level, {\n            opened: true\n          });\n        });\n      }\n\n      levels.push({\n        levelKey: levelKey,\n        row: row,\n        opened: false\n      });\n    } else {\n      levels = levels.map(function (level) {\n        return _assign({}, level, {\n          opened: true\n        });\n      });\n    }\n\n    result.push(tableRow);\n  });\n  levels.slice().reverse().forEach(closeLevel);\n  return result;\n};\n\nvar isTotalSummaryTableCell = function isTotalSummaryTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_TOTAL_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isGroupSummaryTableCell = function isGroupSummaryTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_GROUP_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isTreeSummaryTableCell = function isTreeSummaryTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_TREE_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isTotalSummaryTableRow = function isTotalSummaryTableRow(tableRow) {\n  return tableRow.type === TABLE_TOTAL_SUMMARY_TYPE;\n};\n\nvar isGroupSummaryTableRow = function isGroupSummaryTableRow(tableRow) {\n  return tableRow.type === TABLE_GROUP_SUMMARY_TYPE;\n};\n\nvar isTreeSummaryTableRow = function isTreeSummaryTableRow(tableRow) {\n  return tableRow.type === TABLE_TREE_SUMMARY_TYPE;\n};\n\nvar getColumnSummaries = function getColumnSummaries(summaryItems, columnName, summaryValues) {\n  return summaryItems.map(function (item, index) {\n    return [item, index];\n  }).filter(function (_a) {\n    var _b = __read(_a, 1),\n        item = _b[0];\n\n    return item.columnName === columnName;\n  }).map(function (_a) {\n    var _b = __read(_a, 2),\n        item = _b[0],\n        index = _b[1];\n\n    return {\n      type: item.type,\n      value: summaryValues[index]\n    };\n  });\n};\n\nvar getTargetColumnGeometries = function getTargetColumnGeometries(columnGeometries, sourceIndex) {\n  var sourceWidth = columnGeometries[sourceIndex].right - columnGeometries[sourceIndex].left;\n\n  var getWidthDifference = function getWidthDifference(index) {\n    return columnGeometries[index].right - columnGeometries[index].left - sourceWidth;\n  };\n\n  return columnGeometries.map(function (_a, targetIndex) {\n    var top = _a.top,\n        right = _a.right,\n        bottom = _a.bottom,\n        left = _a.left;\n    var leftBorder = left;\n\n    if (targetIndex > 0 && targetIndex <= sourceIndex) {\n      leftBorder = Math.min(leftBorder, leftBorder - getWidthDifference(targetIndex - 1));\n    }\n\n    if (targetIndex > sourceIndex) {\n      leftBorder = Math.max(leftBorder, leftBorder + getWidthDifference(targetIndex));\n    }\n\n    var rightBorder = right;\n\n    if (targetIndex < columnGeometries.length - 1 && targetIndex >= sourceIndex) {\n      rightBorder = Math.max(rightBorder, rightBorder + getWidthDifference(targetIndex + 1));\n    }\n\n    if (targetIndex < sourceIndex) {\n      rightBorder = Math.min(rightBorder, rightBorder - getWidthDifference(targetIndex));\n    }\n\n    return {\n      top: top,\n      bottom: bottom,\n      right: rightBorder,\n      left: leftBorder\n    };\n  });\n};\n\nvar getTableColumnGeometries = function getTableColumnGeometries(columns, tableWidth) {\n  var columnWidths = columns.map(function (column) {\n    return column.width;\n  });\n  var freeSpace = tableWidth;\n  var restrictedSpace = columnWidths.reduce(function (accum, width) {\n    return accum + (width || 0);\n  }, 0);\n  var freeSpacePortions = columnWidths.reduce(function (accum, width) {\n    return accum + (width === undefined ? 1 : 0);\n  }, 0);\n  var freeSpacePortion = (freeSpace - restrictedSpace) / freeSpacePortions;\n  var lastRightPosition = 0;\n  return columnWidths.map(function (width) {\n    return width === undefined ? freeSpacePortion : width;\n  }).map(function (width) {\n    lastRightPosition += width;\n    return {\n      left: lastRightPosition - width,\n      right: lastRightPosition\n    };\n  });\n};\n\nvar getTableTargetColumnIndex = function getTableTargetColumnIndex(columnGeometries, sourceIndex, offset) {\n  return getTargetColumnGeometries(columnGeometries, sourceIndex).findIndex(function (_a) {\n    var left = _a.left,\n        right = _a.right;\n    return offset > left && offset < right;\n  });\n};\n\nvar ANIMATION_DURATION = 200;\n\nvar getAnimationProgress = function getAnimationProgress(animation) {\n  return (new Date().getTime() - animation.startTime) / ANIMATION_DURATION;\n};\n\nvar getAnimations = function getAnimations(prevColumns, nextColumns, tableWidth, prevAnimations) {\n  var resizing = prevColumns.map(function (column) {\n    return column.key;\n  }).join() === nextColumns.map(function (column) {\n    return column.key;\n  }).join();\n  var prevColumnGeometries = new Map(getTableColumnGeometries(prevColumns, tableWidth).map(function (geometry, index) {\n    return [prevColumns[index].key, geometry];\n  }).map(function (_a) {\n    var _b = __read(_a, 2),\n        key = _b[0],\n        geometry = _b[1];\n\n    var animation = prevAnimations.get(key);\n    if (!animation) return [key, geometry];\n    var progress = easeOutCubic(getAnimationProgress(animation));\n    var _c = animation.left,\n        to = _c.to,\n        from = _c.from;\n    var left = (to - from) * progress + from;\n    return [key, {\n      left: left,\n      right: geometry.right - (geometry.left - left)\n    }]; // tslint:disable-next-line:array-type\n  }));\n  var nextColumnGeometries = new Map(getTableColumnGeometries(nextColumns, tableWidth) // tslint:disable-next-line:array-type\n  .map(function (geometry, index) {\n    return [nextColumns[index].key, geometry];\n  }));\n  return new Map(__spread(nextColumnGeometries.keys()).map(function (key) {\n    var prev = prevColumnGeometries.get(key);\n    var next = nextColumnGeometries.get(key);\n    var result = {\n      startTime: new Date().getTime(),\n      style: {}\n    };\n    var takePrevColumnIntoAccount = !!prevAnimations.get(key) || prev && !resizing;\n\n    if (Math.abs((takePrevColumnIntoAccount ? prev.left : next.left) - next.left) > 1) {\n      result.left = {\n        from: prev.left,\n        to: next.left\n      };\n    }\n\n    return [key, result];\n  }).filter(function (animation) {\n    return animation[1].left;\n  }));\n};\n\nvar filterActiveAnimations = function filterActiveAnimations(animations) {\n  return new Map(__spread(animations.entries()).filter(function (_a) {\n    var _b = __read(_a, 2),\n        animation = _b[1];\n\n    return getAnimationProgress(animation) < 1;\n  }));\n};\n\nvar evalAnimations = function evalAnimations(animations) {\n  return new Map(__spread(animations.entries()).map(function (_a) {\n    var _b = __read(_a, 2),\n        key = _b[0],\n        animation = _b[1];\n\n    var progress = easeOutCubic(getAnimationProgress(animation));\n\n    var result = _assign({}, animation.style);\n\n    if (animation.left) {\n      var offset = (animation.left.to - animation.left.from) * (progress - 1);\n      result.transform = \"translateX(\" + offset + \"px)\";\n    }\n\n    return [key, result];\n  }));\n};\n\nvar isOnTheSameLine = function isOnTheSameLine(geometry, y) {\n  return y >= geometry.top && y <= geometry.bottom;\n};\n\nvar rectToObject = function rectToObject(_a) {\n  var top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom,\n      left = _a.left;\n  return {\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n};\n\nvar collapseGapsBetweenItems = function collapseGapsBetweenItems(geometries) {\n  return geometries.map(function (geometry, index) {\n    if (index !== geometries.length - 1 && geometry.top === geometries[index + 1].top) {\n      return _assign({}, geometry, {\n        right: geometries[index + 1].left\n      });\n    }\n\n    return geometry;\n  });\n};\n\nvar getGroupCellTargetIndex = function getGroupCellTargetIndex(geometries, sourceIndex, _a) {\n  var x = _a.x,\n      y = _a.y;\n  if (geometries.length === 0) return 0;\n  var targetGeometries = sourceIndex !== -1 ? getTargetColumnGeometries(geometries, sourceIndex) : geometries.map(rectToObject);\n  var targetIndex = collapseGapsBetweenItems(targetGeometries).findIndex(function (geometry, index) {\n    var inVerticalBounds = isOnTheSameLine(geometry, y);\n    var inHorizontalBounds = x >= geometry.left && x <= geometry.right;\n    var shouldGoFirst = index === 0 && x < geometry.left;\n    var shouldGoOnLineBreak = !inVerticalBounds && !!geometries[index - 1] && isOnTheSameLine(geometries[index - 1], y);\n    return inVerticalBounds && inHorizontalBounds || shouldGoFirst || shouldGoOnLineBreak;\n  });\n  return targetIndex === -1 ? geometries.length : targetIndex;\n};\n\nvar TABLE_STUB_TYPE = Symbol('stub');\n\nvar getVisibleBoundaryWithFixed = function getVisibleBoundaryWithFixed(visibleBoundary, items) {\n  return items.reduce(function (acc, item, index) {\n    if (item.fixed && (index < visibleBoundary[0] || index > visibleBoundary[1])) {\n      acc.push([index, index]);\n    }\n\n    return acc;\n  }, [visibleBoundary]);\n};\n\nvar getVisibleBoundary = function getVisibleBoundary(items, viewportStart, viewportSize, getItemSize, overscan) {\n  var start = null;\n  var end = null;\n  var viewportEnd = viewportStart + viewportSize;\n  var index = 0;\n  var beforePosition = 0;\n\n  while (end === null && index < items.length) {\n    var item = items[index];\n    var afterPosition = beforePosition + getItemSize(item);\n    var isVisible = beforePosition >= viewportStart && beforePosition < viewportEnd || afterPosition > viewportStart && afterPosition <= viewportEnd || beforePosition < viewportStart && afterPosition > viewportEnd;\n\n    if (isVisible && start === null) {\n      start = index;\n    }\n\n    if (!isVisible && start !== null) {\n      end = index - 1;\n      break;\n    }\n\n    index += 1;\n    beforePosition = afterPosition;\n  }\n\n  if (start !== null && end === null) {\n    end = index - 1;\n  }\n\n  start = start === null ? 0 : start;\n  end = end === null ? 0 : end;\n\n  if (overscan) {\n    start = Math.max(0, start - overscan);\n    end = Math.min(items.length - 1, end + overscan);\n  }\n\n  return [start, end];\n};\n\nvar getSpanBoundary = function getSpanBoundary(items, visibleBoundaries, getItemSpan) {\n  return visibleBoundaries.map(function (visibleBoundary) {\n    var _a = __read(visibleBoundary, 2),\n        start = _a[0],\n        end = _a[1];\n\n    for (var index = 0; index <= visibleBoundary[1]; index += 1) {\n      var span = getItemSpan(items[index]);\n\n      if (index < visibleBoundary[0] && index + span > visibleBoundary[0]) {\n        start = index;\n      }\n\n      if (index + (span - 1) > visibleBoundary[1]) {\n        end = index + (span - 1);\n      }\n    }\n\n    return [start, end];\n  });\n};\n\nvar collapseBoundaries = function collapseBoundaries(itemsCount, visibleBoundaries, spanBoundaries) {\n  var boundaries = [];\n  var visiblePoints = visibleBoundaries.reduce(function (acc, boundary) {\n    for (var point = boundary[0]; point <= boundary[1]; point += 1) {\n      acc.push(point);\n    }\n\n    return acc;\n  }, []);\n  var spanStartPoints = new Set();\n  var spanEndPoints = new Set();\n  spanBoundaries.forEach(function (rowBoundaries) {\n    return rowBoundaries.forEach(function (boundary) {\n      spanStartPoints.add(boundary[0]);\n      spanEndPoints.add(boundary[1]);\n    });\n  });\n  var lastPoint;\n\n  for (var index = 0; index < itemsCount; index += 1) {\n    if (visiblePoints.indexOf(index) !== -1) {\n      if (lastPoint !== undefined) {\n        boundaries.push([lastPoint, index - 1]);\n        lastPoint = undefined;\n      }\n\n      boundaries.push([index, index]);\n    } else if (spanStartPoints.has(index)) {\n      if (index > 0) {\n        boundaries.push([lastPoint !== undefined ? lastPoint : index, index - 1]);\n      }\n\n      lastPoint = index;\n    } else if (spanEndPoints.has(index)) {\n      boundaries.push([lastPoint !== undefined ? lastPoint : index, index]);\n      lastPoint = undefined;\n    } else if (lastPoint === undefined) {\n      lastPoint = index;\n    }\n  }\n\n  if (lastPoint !== undefined) {\n    boundaries.push([lastPoint, itemsCount - 1]);\n  }\n\n  return boundaries;\n};\n\nvar getColumnsSize = function getColumnsSize(columns, startIndex, endIndex, getColumnSize) {\n  var size = 0;\n  var index;\n  var loopEndIndex = endIndex + 1;\n\n  for (index = startIndex; index < loopEndIndex; index += 1) {\n    size += getColumnSize(columns[index], 0) || 0;\n  }\n\n  return size;\n};\n\nvar getCollapsedColumns = function getCollapsedColumns(columns, visibleBoundaries, boundaries, getColumnWidth) {\n  var collapsedColumns = [];\n  boundaries.forEach(function (boundary) {\n    var isVisible = visibleBoundaries.reduce(function (acc, visibleBoundary) {\n      return acc || visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n    }, false);\n\n    if (isVisible) {\n      var column = columns[boundary[0]];\n      collapsedColumns.push(_assign({}, column, {\n        width: getColumnWidth(column)\n      }));\n    } else {\n      collapsedColumns.push({\n        key: TABLE_STUB_TYPE.toString() + \"_\" + boundary[0] + \"_\" + boundary[1],\n        type: TABLE_STUB_TYPE,\n        width: getColumnsSize(columns, boundary[0], boundary[1], getColumnWidth)\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nvar getCollapsedRows = function getCollapsedRows(rows, visibleBoundary, boundaries, getRowHeight, getCells) {\n  var collapsedRows = [];\n  boundaries.forEach(function (boundary) {\n    var isVisible = visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n\n    if (isVisible) {\n      var row = rows[boundary[0]];\n      collapsedRows.push({\n        row: row,\n        cells: getCells(row)\n      });\n    } else {\n      collapsedRows.push({\n        row: {\n          key: TABLE_STUB_TYPE.toString() + \"_\" + boundary[0] + \"_\" + boundary[1],\n          type: TABLE_STUB_TYPE,\n          height: getColumnsSize(rows, boundary[0], boundary[1], getRowHeight)\n        }\n      });\n    }\n  });\n  return collapsedRows;\n};\n\nvar getCollapsedCells = function getCollapsedCells(columns, spanBoundaries, boundaries, getColSpan) {\n  var collapsedCells = [];\n  var index = 0;\n\n  var _loop_1 = function _loop_1() {\n    var boundary = boundaries[index];\n    var isSpan = spanBoundaries.reduce(function (acc, spanBoundary) {\n      return acc || spanBoundary[0] <= boundary[0] && boundary[1] <= spanBoundary[1];\n    }, false);\n\n    if (isSpan) {\n      var column = columns[boundary[0]];\n      var realColSpan = getColSpan(column);\n      var realColSpanEnd_1 = realColSpan + boundary[0] - 1;\n      var colSpanEnd = boundaries.findIndex(function (colSpanBoundary) {\n        return colSpanBoundary[0] <= realColSpanEnd_1 && realColSpanEnd_1 <= colSpanBoundary[1];\n      });\n      collapsedCells.push({\n        column: column,\n        colSpan: colSpanEnd - index + 1\n      });\n      index += 1;\n    } else {\n      collapsedCells.push({\n        column: {\n          key: TABLE_STUB_TYPE.toString() + \"_\" + boundary[0] + \"_\" + boundary[1],\n          type: TABLE_STUB_TYPE\n        },\n        colSpan: 1\n      });\n      index += 1;\n    }\n  };\n\n  while (index < boundaries.length) {\n    _loop_1();\n  }\n\n  return collapsedCells;\n};\n\nvar getCollapsedGrid = function getCollapsedGrid(_a) {\n  var rows = _a.rows,\n      columns = _a.columns,\n      top = _a.top,\n      height = _a.height,\n      left = _a.left,\n      width = _a.width,\n      _b = _a.getColumnWidth,\n      getColumnWidth = _b === void 0 ? function (column) {\n    return column.width;\n  } : _b,\n      _c = _a.getRowHeight,\n      getRowHeight = _c === void 0 ? function (row) {\n    return row.height;\n  } : _c,\n      _d = _a.getColSpan,\n      getColSpan = _d === void 0 ? function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return 1;\n  } : _d;\n\n  if (!rows.length || !columns.length) {\n    return {\n      columns: [],\n      rows: []\n    };\n  }\n\n  var rowsVisibleBoundary = getVisibleBoundary(rows, top, height, getRowHeight, 3);\n  var columnsVisibleBoundary = getVisibleBoundaryWithFixed(getVisibleBoundary(columns, left, width, getColumnWidth, 1), columns);\n  var rowSpanBoundaries = rows.slice(rowsVisibleBoundary[0], rowsVisibleBoundary[1]).map(function (row) {\n    return getSpanBoundary(columns, columnsVisibleBoundary, function (column) {\n      return getColSpan(row, column);\n    });\n  });\n  var columnBoundaries = collapseBoundaries(columns.length, columnsVisibleBoundary, rowSpanBoundaries);\n  var rowBoundaries = collapseBoundaries(rows.length, [rowsVisibleBoundary], []);\n  return {\n    columns: getCollapsedColumns(columns, columnsVisibleBoundary, columnBoundaries, getColumnWidth),\n    rows: getCollapsedRows(rows, rowsVisibleBoundary, rowBoundaries, getRowHeight, function (row) {\n      return getCollapsedCells(columns, getSpanBoundary(columns, columnsVisibleBoundary, function (column) {\n        return getColSpan(row, column);\n      }), columnBoundaries, function (column) {\n        return getColSpan(row, column);\n      });\n    })\n  };\n};\n\nvar getColumnWidthGetter = function getColumnWidthGetter(tableColumns, tableWidth, minColumnWidth) {\n  var colsHavingWidth = tableColumns.filter(function (col) {\n    return col.width !== undefined;\n  });\n  var columnsWidth = colsHavingWidth.reduce(function (acc, col) {\n    return acc + col.width;\n  }, 0);\n  var autoWidth = (tableWidth - columnsWidth) / (tableColumns.length - colsHavingWidth.length);\n  var autoColWidth = Math.max(autoWidth, minColumnWidth);\n  return function (column) {\n    return column.type === TABLE_FLEX_TYPE ? null : column.width || autoColWidth;\n  };\n};\n/** @internal */\n\n\nexport { getColumnExtension, getColumnExtensionValueGetter, getTableColumnGeometries, getTableTargetColumnIndex, getAnimations, filterActiveAnimations, evalAnimations, getGroupCellTargetIndex, getCollapsedGrid, TABLE_STUB_TYPE, getColumnWidthGetter, rowIdGetter, cellValueGetter, changeColumnSorting, getColumnSortingDirection, getPersistentSortedColumns, calculateKeepOther, sortedRows, changeColumnFilter, getColumnFilterConfig, filterExpression, defaultFilterPredicate, filteredRows, filteredCollapsedRowsGetter, unwrappedFilteredRows, GROUP_KEY_SEPARATOR, changeColumnGrouping, toggleExpandedGroups, draftColumnGrouping, cancelColumnGroupingDraft, adjustSortIndex, groupRowChecker, groupRowLevelKeyGetter, groupedRows, expandedGroupRows, groupCollapsedRowsGetter, customGroupedRows, customGroupingRowIdGetter, groupingPanelItems, setCurrentPage, setPageSize, paginatedRows, rowsWithPageHeaders, rowCount, pageCount, currentPage, clamp, firstRowOnPage, lastRowOnPage, calculateStartPage, toggleSelection, rowsWithAvailableToSelect, someSelected, allSelected, unwrapSelectedRows, startEditRows, stopEditRows, addRow, changeAddedRow, cancelAddedRows, changeRow, cancelChanges, deleteRows, cancelDeletedRows, changedRowsByIds, addedRowsByIds, createRowChangeGetter, getRowChange, TABLE_REORDERING_TYPE, changeColumnOrder, orderedColumns, tableHeaderRowsWithReordering, draftOrder, tableColumnsWithWidths, tableColumnsWithDraftWidths, changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft, TABLE_EDIT_COMMAND_TYPE, isHeadingEditCommandsTableCell, isEditCommandsTableCell, tableColumnsWithEditing, TABLE_ADDED_TYPE, TABLE_EDIT_TYPE, isEditTableCell, isAddedTableRow, isEditTableRow, tableRowsWithEditing, TABLE_FILTER_TYPE, DEFAULT_FILTER_OPERATIONS, isFilterTableCell, isFilterTableRow, getColumnFilterOperations, isFilterValueEmpty, getSelectedFilterOperation, tableHeaderRowsWithFilter, TABLE_GROUP_TYPE, isGroupTableCell, isGroupIndentTableCell, isGroupTableRow, tableColumnsWithGrouping, tableRowsWithGrouping, tableGroupCellColSpanGetter, TABLE_HEADING_TYPE, isHeadingTableCell, isHeadingTableRow, findChainByColumnIndex, splitHeaderColumnChains, generateSimpleChains, tableRowsWithHeading, TABLE_BAND_TYPE, BAND_GROUP_CELL, BAND_HEADER_CELL, BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER, isBandedTableRow, isBandedOrHeaderRow, isNoDataColumn, getColumnMeta, getBandComponent, tableRowsWithBands, tableHeaderColumnChainsWithBands, toggleDetailRowExpanded, TABLE_DETAIL_TYPE, isDetailRowExpanded, isDetailToggleTableCell, isDetailTableRow, isDetailTableCell, tableRowsWithExpandedDetail, tableColumnsWithDetail, tableDetailCellColSpanGetter, TABLE_SELECT_TYPE, isSelectTableCell, isSelectAllTableCell, tableColumnsWithSelection, TABLE_DATA_TYPE, TABLE_NODATA_TYPE, TABLE_FLEX_TYPE, isDataTableCell, isHeaderStubTableCell, isDataTableRow, isNoDataTableRow, isNoDataTableCell, tableColumnsWithDataRows, tableRowsWithDataRows, tableCellColSpanGetter, visibleTableColumns, tableDataColumnsExist, columnChooserItems, toggleColumn, toggleRowExpanded, customTreeRowsWithMeta, customTreeRowIdGetter, customTreeRowLevelKeyGetter, expandedTreeRows, collapsedTreeRowsGetter, isTreeRowLeafGetter, getTreeRowLevelGetter, unwrappedCustomTreeRows, isTreeTableCell, changeSearchValue, searchFilterExpression, getAvailableFilterOperationsGetter, FIXED_COLUMN_LEFT_SIDE, FIXED_COLUMN_RIGHT_SIDE, TABLE_FIXED_TYPE, getFixedColumnKeys, isFixedTableRow, calculateFixedColumnProps, tableColumnsWithFixed, tableHeaderRowsWithFixed, tableHeaderColumnChainsWithFixed, defaultSummaryCalculator, totalSummaryValues, groupSummaryValues, treeSummaryValues, tableRowsWithTotalSummaries, tableRowsWithSummaries, isTotalSummaryTableCell, isGroupSummaryTableCell, isTreeSummaryTableCell, isTotalSummaryTableRow, isGroupSummaryTableRow, isTreeSummaryTableRow, getColumnSummaries, TABLE_TOTAL_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TREE_SUMMARY_TYPE };","map":null,"metadata":{},"sourceType":"module"}